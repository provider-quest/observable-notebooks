{
  "id": "fd1c9b3d2d13ae0c",
  "slug": "deals-trips-provider-quest",
  "trashed": false,
  "description": "",
  "likes": 0,
  "publish_level": "live",
  "forks": 1,
  "fork_of": {
    "id": "3bbd19478bdde1c5",
    "slug": "provider-quest-miners-on-a-global-map",
    "title": "Global Map [Provider.Quest]",
    "owner": {
      "id": "bda4505ba9a55ac8",
      "github_login": "jimpick",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "login": "jimpick",
      "name": "Jim Pick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "type": "individual",
      "tier": "public",
      "following_count": 0,
      "followers_count": 0,
      "following": false
    },
    "version": 756
  },
  "has_importers": false,
  "update_time": "2023-01-30T20:37:03.901Z",
  "first_public_version": 1251,
  "paused_version": null,
  "publish_time": "2021-10-16T00:48:19.921Z",
  "publish_version": 1253,
  "latest_version": 1253,
  "thumbnail": null,
  "default_thumbnail": null,
  "roles": [],
  "sharing": null,
  "tags": [],
  "owner": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "type": "individual",
    "tier": "public",
    "following_count": 0,
    "followers_count": 0,
    "following": false
  },
  "creator": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "tier": "public",
    "following_count": 0,
    "followers_count": 0,
    "following": false
  },
  "authors": [
    {
      "id": "bda4505ba9a55ac8",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "name": "Jim Pick",
      "login": "jimpick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "github_login": "jimpick",
      "tier": "public",
      "approved": true,
      "description": "",
      "following_count": 0,
      "followers_count": 0,
      "following": false
    }
  ],
  "collections": [
    {
      "id": "242749e359cb986b",
      "type": "public",
      "slug": "provider-quest",
      "title": "Provider.Quest",
      "description": "Analytics and visualizations for the Filecoin network",
      "update_time": "2021-09-27T20:45:27.747Z",
      "pinned": false,
      "ordered": true,
      "custom_thumbnail": null,
      "default_thumbnail": "7f360024b03a87e10493b101b9df4cf7af2a618c7935c0e9c0e91c54a54c4c24",
      "thumbnail": "7f360024b03a87e10493b101b9df4cf7af2a618c7935c0e9c0e91c54a54c4c24",
      "listing_count": 31,
      "parent_collection_count": 1,
      "owner": {
        "id": "bda4505ba9a55ac8",
        "github_login": "jimpick",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
        "login": "jimpick",
        "name": "Jim Pick",
        "bio": "Freelance Filecoin developer in Victoria, Canada",
        "home_url": "https://github.com/jimpick",
        "type": "individual",
        "tier": "public",
        "following_count": 0,
        "followers_count": 0,
        "following": false
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "suggestion_from": null,
  "suggestions_to": [],
  "version": 1253,
  "title": "Deals: Trips [Provider.Quest]",
  "license": "apache-2.0",
  "copyright": "Copyright 2021 Jim Pick",
  "nodes": [
    {
      "id": 0,
      "value": "md`# Deals: Trips [Provider.Quest]`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1029,
      "value": "md`Note: Under construction!`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 734,
      "value": "md`${quickMenu}`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 163,
      "value": "md`This notebook shows deals with storage providers with location data on a Deck.gl-based 3D globe. (Reported locations from IP addresses, non-verified). Client locations are fictionalized.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 972,
      "value": "viewof elapsed = Scrubber(d3.range(startTime, endTime, (endTime - startTime) / 40000), {\n  delay: 50,\n  loop: false,\n  autoplay: false,\n  initial: 0\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1003,
      "value": "new Date(elapsed)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1006,
      "value": "Plot.plot({\n  marks: [\n    Plot.cell(['Unverified', 'Verified'], {x: d => d, fill: d => d})\n  ]\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 332,
      "value": "container = html `<div style=\"height:600px\"></div>`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1212,
      "value": "overlayLayer = () => {\n  return new deck.TextLayer({\n    id: 'overlay-layer',\n    data: [\n      {\n        text: 'Filecoin Published Deals',\n        position: [ -200, -120 ],\n        size: 24,\n        color: [255, 255, 255, 255]\n      },\n      {\n        text: formatInTimeZone(viewof elapsed.value, 'yyyy MMM dd HH:mm', 'utc'),\n        position: [ -70, 115 ],\n        size: 32,\n        color: [255, 255, 255, 255]\n      },\n      {\n        text: 'Provider.Quest',\n        position: [ 160, -135 ],\n        size: 14,\n        color: [255, 255, 255, 255]\n      },\n      {\n        text: 'Regular Deal',\n        position: [ -200, 105 ],\n        size: 16,\n        color: colorBlue\n      },\n      {\n        text: 'Filecoin+ Deal',\n        position: [ -200, 118 ],\n        size: 16,\n        color: colorOrange\n      }\n    ],\n    getPosition: d => d.position,\n    getText: d => d.text,\n    getSize: d => d.size,\n    getColor: d => d.color,\n    getTextAnchor: 'start'\n  })\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 858,
      "value": "deckgl.update(elapsed)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 617,
      "value": "import {geoIpLookupsBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 619,
      "value": "minerLocationsReport = (await fetch(`${geoIpLookupsBucketUrl}/miner-locations-latest.json`)).json()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 648,
      "value": "import {minerPowerDailyAverageLatestBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 651,
      "value": "minerPowerDailyAverageReport = (await fetch(`${minerPowerDailyAverageLatestBucketUrl}/miner-power-daily-average-latest.json`)).json()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 663,
      "value": "data = minerLocationsReport.minerLocations\n  .filter(({ miner }) => minerPowerDailyAverageReport.miners[miner])\n  .map(({ miner, long, lat, numLocations }) => {\n    const power = minerPowerDailyAverageReport.miners[miner].qualityAdjPower\n    return {\n      latitude: Number(lat),\n      longitude: Number(long),\n      qualityAdjPower: power / numLocations\n    }\n  })",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 314,
      "value": "md`# Visualizing with Deck.gl\n\nWe have miner power data and we have location data, so we can visualize it with the [Deck.gl](https://deck.gl/) library using a [HexagonLayer](https://deck.gl/#/documentation/deckgl-api-reference/layers/hexagon-layer). (Based on: [@pessimistress/deck-gl-hexagonlayer-example](https://observablehq.com/@pessimistress/deck-gl-hexagonlayer-example), [@nharrisanalyst/deck-gl](https://observablehq.com/@nharrisanalyst/deck-gl))`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 825,
      "value": "deck = require.alias({\n  // optional dependencies\n  h3: {}\n})('deck.gl@latest/dist.min.js')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 525,
      "value": "luma = deck && window.luma",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 324,
      "value": "mapboxgl = require('mapbox-gl')",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 334,
      "value": "initialViewState = ({\n  latitude: 30,\n  longitude: 25,\n  zoom: 1.05,\n  bearing: 0,\n  pitch: 0,\n  minZoom: 1,\n  maxZoom: 20\n})",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 330,
      "value": "deckgl = {\n  const myDeck = new deck.DeckGL({\n    container,\n    map: mapboxgl,\n    mapboxAccessToken: '',\n    // This token is for demo-purpose only and rotated regularly. Get your token at https://www.mapbox.com\n    mapboxApiAccessToken: 'pk.eyJ1IjoidWJlcmRhdGEiLCJhIjoiY2pudzRtaWloMDAzcTN2bzN1aXdxZHB5bSJ9.2bkj3IiRC8wj3jLThvDGdA',\n    mapStyle: 'mapbox://styles/mapbox/dark-v9',\n    initialViewState,\n    controller: true,\n    views: [\n      new deck.MapView({\n        id: 'map-view'\n      }),\n      new deck.OrthographicView({\n        id: 'ortho-view'\n      })\n    ],\n    layers: [\n      heatmapLayer(),\n      tripsLayer(),\n      overlayLayer()\n    ],\n    layerFilter: ({ layer, viewport }) => {\n      if (viewport.id === 'map-view' && layer.id === 'heatmap-layer') return true\n      if (viewport.id === 'map-view' && layer.id === 'trips-layer') return true\n      if (viewport.id === 'ortho-view' && layer.id === 'overlay-layer') return true\n      return false\n    }\n  })\n  return Object.assign(myDeck, {\n    update(sliderValue) {\n      // console.log('Jim update', sliderValue)\n      myDeck.setProps({ layers: [\n        heatmapLayer(),\n        tripsLayer(),\n        overlayLayer()\n      ] })\n    }\n  })\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 338,
      "value": "hexagonLayer = new deck.HexagonLayer({\n  id: 'miners',\n  extruded: true,\n  data: data,\n  radius: 80000,\n  getPosition: d => [d.longitude, d.latitude],\n  getElevationWeight: d => d.qualityAdjPower,\n  elevationAggregation: 'SUM',\n  elevationScale: 400,\n  opacity: 0.6,\n  colorRange: [\n      [0, 170, 0, 255],\n      [0, 190, 0, 255],\n      [0, 255, 0, 255]\n    ]\n})",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 834,
      "value": "tripsLayer = () => new deck.TripsLayer({\n  id: 'trips-layer',\n  data: dealTripsData,\n  currentTime: viewof elapsed.value - startTime,\n  // fadeTrail: true,\n  getTimestamps: d => d.waypoints.map(p => p.timestamp - startTime),\n  trailLength: 600000,\n  \n  /* props inherited from PathLayer class */\n  \n  // billboard: false,\n  capRounded: true,\n  // getColor: [253, 128, 93],\n  getColor: d => d.verified ? colorOrange : colorBlue,\n  getPath: d => d.waypoints.map(p => p.coordinates),\n  getWidth: d => d.width,\n  // getWidth: 1,\n  jointRounded: true,\n  // miterLimit: 4,\n  // rounded: true,\n  // widthMaxPixels: Number.MAX_SAFE_INTEGER,\n  widthMinPixels: 1,\n  // widthScale: 1,\n  // widthUnits: 'meters',\n  \n  /* props inherited from Layer class */\n  \n  // autoHighlight: false,\n  // coordinateOrigin: [0, 0, 0],\n  // coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  // highlightColor: [0, 0, 128, 128],\n  // modelMatrix: null,\n  opacity: 0.8,\n  // pickable: false,\n  // visible: true,\n  // wrapLongitude: false,\n  /*\n  getPath: d => d.waypoints.map(p => p.coordinates),\n  // deduct start timestamp from each data point to avoid overflow\n  getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\n  getColor: [253, 128, 93],\n  opacity: 0.8,\n  widthMinPixels: 5,\n  rounded: true,\n  fadeTrail: true,\n  trailLength: 200,\n  currentTime: 100\n                                 */\n})",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1034,
      "value": "heatmapLayer = () => {\n  const binIndex = Math.floor(heatmapTimeScale(viewof elapsed.value))\n  return new deck.HeatmapLayer({\n    id: 'heatmap-layer',\n    data: heatmapData,\n    getPosition: d => d[0],\n    getWeight: d => {\n      return d[1][binIndex]\n    },\n    weightsTextureSize: 512,\n    radiusPixels: 40,\n    aggregation: 'SUM',\n    updateTriggers: {\n      getWeight: binIndex\n    }\n  })\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1172,
      "value": "heatmapLayer()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 866,
      "value": "md`## Data`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 869,
      "value": "dealPairsUrl = {\n  return 'https://bafybeibp4lrdgfyeb4sej45v4ooert5lwc2hgbcan4fq2kys7minay4254.ipfs.dweb.link/pairs-2023.01.30.json'\n  // return 'https://ipfs.io/ipfs/bafybeibp4lrdgfyeb4sej45v4ooert5lwc2hgbcan4fq2kys7minay4254/pairs-2023.01.30.json'\n  // return 'https://gateway.pinata.cloud/ipfs/QmV9YPNHNujxgCz7XBXE1ydFQHnGi6FF9CfjxTxY1HsqjU/pairs.json'\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 872,
      "value": "pairsData = (await fetch(dealPairsUrl)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 876,
      "value": "providerLocations = {\n  const providerLocations = new Map()\n  for (const { miner, long, lat } of minerLocationsReport.minerLocations) {\n    const locations = providerLocations.get(miner) || []\n    locations.push([long, lat])\n    providerLocations.set(miner, locations)\n  }\n  return providerLocations\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 880,
      "value": "filteredPairs = {\n  const tripsData = []\n  for (const { provider, start, ...rest } of pairsData) {\n    const providerLocationList = providerLocations.get(provider)\n    if (providerLocationList) {\n      const publishTime = d3.isoParse(start)\n      tripsData.push({\n        publishTime,\n        provider,\n        ...rest\n      })\n    }\n  }\n  return tripsData\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 919,
      "value": "clients = new Set(filteredPairs.map(({ client }) => client))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1018,
      "value": "cityIndexIpfsUrl",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 933,
      "value": "compressedCityIndex = (await fetch(cityIndexIpfsUrl)).arrayBuffer()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 941,
      "value": "inflated = pako.inflate(compressedCityIndex)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 945,
      "value": "cityIndex = cbor.decodeFirst(inflated)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 924,
      "value": "clientLocations = {\n  const clientLocations = new Map()\n  for (const client of clients) {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(client)\n    const hash = await crypto.subtle.digest('SHA-256', data)\n    const hash2Bytes = new Uint8Array(hash.slice(0,2))\n    const index = hash2Bytes[0] * 256 + hash2Bytes[1]\n    const [latitude, longitude] = lookupGeo(cityIndex, index)\n    clientLocations.set(client, [longitude, latitude])\n  }\n  return clientLocations\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 890,
      "value": "dealTripsData = {\n  const tripsData = []\n  const rng = new seedrandom('hello.')\n  const bandwidth = 0.2 * 1024**3 // bytes per minute - FIXME: set per pair\n  for (const { publishTime, provider, client, verified, count, size } of filteredPairs) {\n    const providerLocationList = providerLocations.get(provider)\n    for (let i = 0; i < count; i++) {\n      const providerLocation = providerLocationList[Math.floor(rng.quick() * providerLocationList.length)]\n      const clientLocation = clientLocations.get(client)\n      const startTime = dateFns.sub(publishTime, { seconds: 24 * 60 * 60 * rng.quick() })\n      const duration = size / bandwidth\n      const endTime = dateFns.add(startTime, { minutes: duration })\n      /*\n      tripsData.push({\n        publishTime,\n        startTime,\n        duration,\n        endTime,\n        i,\n        count,\n        // random: rng.quick(),\n        // providerLocations: providerLocationList,\n        clientLocation,\n        providerLocation,\n        provider,\n        client,\n        size\n      })\n      */\n      tripsData.push({\n        verified,\n        width: 200 * 1000 // 200km\n          * size / (32 * 1024**3),\n        waypoints: [\n          {\n            coordinates: clientLocation,\n            timestamp: startTime.getTime()\n          },\n          {\n            coordinates: providerLocation,\n            timestamp: endTime.getTime()\n          }\n        ]\n      })\n    }\n  }\n  return tripsData\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1043,
      "value": "numHeatmapBins = dateFns.differenceInHours(endTime, startTime) * 4",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1047,
      "value": "heatmapTimeScale = d3.scaleTime()\n  .domain([new Date(startTime), new Date(endTime)])\n  .range([0, numHeatmapBins])",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1153,
      "value": "heatmapData = Array.from(d3.rollup(\n  dealTripsData,\n  values => {\n    const bins = []\n    for (const value of values) {\n      const timestamp = value.waypoints[1].timestamp\n      const binIndex = Math.floor(heatmapTimeScale(timestamp))\n      for (let i = binIndex + 1; i <= binIndex + 3 * 4; i++) { // heat up for 3 hours\n        bins[i] = (bins[i] || 0) + value.width\n      }\n    }\n    // return { length: values.length, bins, v: values }\n    return bins\n  },\n  d => d.waypoints[1].coordinates\n))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 952,
      "value": "startTime = dealTripsData.reduce((min, { waypoints }) => {\n  const timestamp = waypoints[0].timestamp\n  if (!min) return timestamp\n  return min > timestamp ? timestamp : min\n}, null)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 955,
      "value": "endTime = dealTripsData.reduce((max, { waypoints }) => {\n  const timestamp = waypoints[1].timestamp\n  if (!max) return timestamp\n  return timestamp > max ? timestamp : max\n}, null)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 986,
      "value": " colorBlue = {\n   const c = d3.color(d3.schemeTableau10[0])\n   return [c.r, c.g, c.b]\n }",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 996,
      "value": " colorOrange = {\n   const c = d3.color(d3.schemeTableau10[1])\n   return [c.r, c.g, c.b]\n }",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 728,
      "value": "md`## Imports`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 731,
      "value": "import {quickMenu} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 897,
      "value": "seedrandom = require('seedrandom@3.0.5/seedrandom.min.js')",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 912,
      "value": "dateFns = require('https://bundle.run/date-fns@2.22.1')",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1234,
      "value": "dateFnsTz = import('https://cdn.skypack.dev/date-fns-tz@1.1.6?min')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 930,
      "value": "import {lookupGeo, cityIndexIpfsUrl} from '@jimpick/65-536-cities'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 935,
      "value": "pako = import('https://cdn.skypack.dev/pako@2.0.4?min')",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 938,
      "value": "cbor = import('https://cdn.skypack.dev/borc')",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 969,
      "value": "import {Scrubber} from \"@mbostock/scrubber\"",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1231,
      "value": "formatInTimeZone = (date, fmt, tz) =>\n  dateFnsTz.format(dateFnsTz.utcToZonedTime(date, tz), \n         fmt, \n         { timeZone: tz })",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1241,
      "value": "## Backups",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 1245,
      "value": "import {backups, backupNowButton} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1248,
      "value": "backups()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    }
  ],
  "resolutions": []
}

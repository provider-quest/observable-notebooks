{
  "id": "5e45845d0e219395",
  "slug": "internal-synthetic-locations-from-provider-funding-tree-b",
  "trashed": false,
  "description": "",
  "likes": 0,
  "publish_level": "public",
  "forks": 0,
  "fork_of": {
    "id": "f942e8efd6084ede",
    "slug": "internal-synthetic-locations-from-provider-funding-tree",
    "title": "Internal: Synthetic Locations from Provider Funding Tree [Provider.Quest]",
    "owner": {
      "id": "bda4505ba9a55ac8",
      "github_login": "jimpick",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "login": "jimpick",
      "name": "Jim Pick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "type": "individual",
      "tier": "public",
      "following_count": 0,
      "followers_count": 1,
      "following": false
    },
    "version": 770
  },
  "has_importers": false,
  "update_time": "2022-05-25T19:10:44.773Z",
  "first_public_version": null,
  "paused_version": null,
  "publish_time": "2022-05-25T19:10:44.773Z",
  "publish_version": 772,
  "latest_version": 772,
  "thumbnail": "0e5997d40fcd06aba4586d2f26d31ff17a4b4ca825077c573b0cec743f3c814f",
  "default_thumbnail": "0e5997d40fcd06aba4586d2f26d31ff17a4b4ca825077c573b0cec743f3c814f",
  "roles": [],
  "sharing": null,
  "tags": [],
  "owner": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "type": "individual",
    "tier": "public",
    "following_count": 0,
    "followers_count": 1,
    "following": false
  },
  "creator": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "tier": "public",
    "following_count": 0,
    "followers_count": 1,
    "following": false
  },
  "authors": [
    {
      "id": "bda4505ba9a55ac8",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "name": "Jim Pick",
      "login": "jimpick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "github_login": "jimpick",
      "tier": "public",
      "approved": true,
      "description": "",
      "following_count": 0,
      "followers_count": 1,
      "following": false
    }
  ],
  "collections": [],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "suggestion_from": null,
  "suggestions_to": [],
  "version": 772,
  "title": "Internal: Synthetic Locations from Provider Funding Tree - Backfill [Provider.Quest]",
  "license": "apache-2.0",
  "copyright": "Copyright 2022 Jim Pick",
  "nodes": [
    {
      "id": 0,
      "value": "# Internal: Synthetic Locations from Provider Funding Tree - Backfill [Provider.Quest]",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 118,
      "value": "## Full Funder Tree",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 728,
      "value": "currentEpoch = dateToEpoch(new Date())",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 732,
      "value": "currentEpochDate = epochToDate(currentEpoch).toISOString()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 698,
      "value": "minersAndFundersUrl = 'https://provider-quest.s3.us-west-2.amazonaws.com/miners-and-funders-2022-03-17.json'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 463,
      "value": "allFundedWithMinerId = (await fetch(minersAndFundersUrl)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 233,
      "value": "Problem: We have multiple roots, some are probably because of a circular reference during the scan. Ideally we would have one root. FIXME: Investigate, see if we can fix references in the scanning phase.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 296,
      "value": "roots = allFundedWithMinerId.filter(({ funded_from }) => !funded_from).sort(sortIdRecords)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 229,
      "value": "Inputs.table(roots, { columns: [ \"id\", \"address\" ] })",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 439,
      "value": "Join all the individual roots together with a synthetic master root.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 443,
      "value": "joinedAllFundedWithMinerId = allFundedWithMinerId\n  .map(record => ({\n    ...record,\n    funded_from: record.funded_from || 'root'\n  }))\n  .concat([{\n    id: \"root\",\n    address: \"root\",\n    funded_from: null,\n    miner_id: null\n  }])",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 745,
      "value": "Find all miner IDs that aren't in the tree because they are newer than the funding data, and create records for them on the root.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 749,
      "value": "minersWithFundingDataSet = {\n  const minersSet = new Set()\n  for (const { miner_id } of joinedAllFundedWithMinerId) {\n    minersSet.add(miner_id)\n  }\n  return minersSet\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 753,
      "value": "minersWithPowerSet = new Set(Object.keys(minerPowerLatestReport.miners))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 756,
      "value": "minersWithNoFundingSet = {\n  const minersSet = new Set()\n  for (const minerId of [...minersWithPowerSet]) {\n    if (!minersWithFundingDataSet.has(minerId)) {\n      minersSet.add(minerId)\n    }\n  }\n  return minersSet\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 759,
      "value": "fakeFundingRecords = [...minersWithNoFundingSet].map(minerId => ({\n  id: minerId,\n  address: minerId,\n  funded_from: \"root\",\n  miner_id: minerId\n}))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 766,
      "value": "joinedAllFundedWithMinerIdAndFakes = {\n  return joinedAllFundedWithMinerId\n  // FIXME: Joining records at the root appears to have over-allocated delegates to Vietnam - investigate \n  // joinedAllFundedWithMinerId.concat(fakeFundingRecords)\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 237,
      "value": "Walk tree starting from `root` to find subset we are interested in.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 248,
      "value": "reachable = {\n  const addressIndex = d3.index(joinedAllFundedWithMinerIdAndFakes, d => d.id)\n  const fundedFromIndex = d3.group(joinedAllFundedWithMinerIdAndFakes, d => d.funded_from)\n  const start = addressIndex.get('root')\n  const reachable = []\n  \n  function walk (from) {\n    reachable.push(from)\n    // console.log('Walking', from.id)\n    const fundedNodes = fundedFromIndex.get(from.address)\n    // console.log('Funded Nodes', fundedNodes)\n    if (fundedNodes) {\n      for (const funded of fundedNodes) {\n        walk(funded)\n      }\n    }\n  }\n\n  walk(start)\n\n  return reachable\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 499,
      "value": "stratify = d3.stratify()\n    .id(d => d[\"address\"])\n    .parentId(d => d[\"funded_from\"])",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 269,
      "value": "reachableTree = stratify(reachable)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 272,
      "value": "/* Too big!! graph(reachableTree, {label: d => d.data.id + (d.data.miner_id ? ` (SP: ${d.data.miner_id})` : '') }) */",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 323,
      "value": "## Filtered Funder Tree",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 327,
      "value": "Reduce tree to only include leaves for SPs that have ever had power.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 331,
      "value": "leavesWithPower = reachable.filter(({ miner_id }) => minerPowerLatestReport.miners[miner_id])",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 337,
      "value": "reachableWithPower = {\n  const addressIndex = d3.index(reachable, d => d.address)\n  const filtered = new Map()\n  \n  function walkUp (node) {\n    // console.log('WalkUp', node)\n    filtered.set(node.id, {\n      ...node,\n      qualityAdjPower: minerPowerDailyAverageReport.miners[node.miner_id] && \n        minerPowerDailyAverageReport.miners[node.miner_id].qualityAdjPower\n    })\n    if (node.funded_from) {\n      // console.log('funded_from', node.funded_from, addressIndex)\n      walkUp(addressIndex.get(node.funded_from))\n    }\n  }\n\n  for (const leaf of leavesWithPower) {\n    walkUp(leaf)\n  }\n\n  return [...filtered.values()].sort(sortIdRecords)\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 350,
      "value": "reachableWithPowerTree = stratify(reachableWithPower)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 373,
      "value": "shortCircuit1 = true",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 355,
      "value": "!shortCircuit1 && graph(reachableWithPowerTree, {label: d => d.data.id + (d.data.miner_id ? ` (SP: ${d.data.miner_id} - ${bytes(d.data.qualityAdjPower, { mode: 'binary' })})` : '') })",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 376,
      "value": "## Filtered Funder Tree with Location Metadata",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 380,
      "value": "reachableWithPowerAndRegions = reachableWithPower.map(record => {\n  const newRecord = record\n  if (record.miner_id) {\n    const regions = minerRegionsCSPReport.minerRegions.filter(({ miner }) => miner === record.miner_id)\n    if (regions.length > 0) {\n      newRecord.regions = regions.map(({ region }) => region)\n    }\n  }\n  return newRecord\n})",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 554,
      "value": "button(reachableWithPowerAndRegions, 'funder-tree-base.json')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 386,
      "value": "reachableWithPowerAndRegionsTree = stratify(reachableWithPowerAndRegions)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 388,
      "value": "shortCircuit2 = true",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 390,
      "value": "!shortCircuit2 && graph(reachableWithPowerAndRegionsTree, {\n  label: d => \n    (d.data.miner_id ?\n     `SP: ${d.data.miner_id} - ${bytes(d.data.qualityAdjPower, { mode: 'binary' })}` : d.data.id) +\n    (d.data.regions ?\n     ` - ${d.data.regions.join(', ')}` : '')\n})",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 567,
      "value": "## Funder Tree with Delegates",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 571,
      "value": "import { matchDelegate } from '@jimpick/internal-provider-funding-tree-test-cases-test'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 661,
      "value": "async function *getTreeWithDelegatesStream (tree) {\n  const providerLeaves = []\n  for (const provider of tree.leaves()) {\n    if (!provider.data.regions) {\n      providerLeaves.push(provider)\n    }\n  }\n  let count = 0\n  for (const provider of providerLeaves) {\n    console.log(`Computing delegate for ${provider.data.id}`)\n    const delegateId = await matchDelegate(provider)\n    // const delegateId = 'xxx'\n    \n    console.log(`Delegate: ${provider.data.id} => ${delegateId}`)\n    provider.data.delegateId = delegateId\n    yield {\n      done: false,\n      processed: ++count,\n      total: providerLeaves.length\n    }\n  }\n  yield {\n    done: true,\n    tree\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 574,
      "value": "viewof start = Inputs.button('Start')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 577,
      "value": "funderTreeWithDelegatesProgress = start && getTreeWithDelegatesStream(reachableWithPowerAndRegionsTree)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 710,
      "value": "funderTreeWithDelegatesProgressWithoutResult = {\n  if (!funderTreeWithDelegatesProgress) return false\n  const { tree, ...rest } = funderTreeWithDelegatesProgress\n  return { ...rest }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 670,
      "value": "funderTreeWithDelegates = funderTreeWithDelegatesProgress && funderTreeWithDelegatesProgress.done ? funderTreeWithDelegatesProgress.tree : null",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 589,
      "value": "## Synthetic Provider Regions",
      "pinned": true,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 597,
      "value": "providerCSPRegions = d3.group(minerRegionsCSPReport.minerRegions, d => d.miner)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 592,
      "value": "syntheticProviderCSPRegions = {\n  if (!funderTreeWithDelegates) return\n  const providerRegionsWithDelegates = []\n  for (const provider of funderTreeWithDelegates.leaves()) {\n    const { miner_id: providerId, delegateId } = provider.data\n    const targetId = delegateId || providerId\n    const targetRegions = providerCSPRegions.get(targetId)\n    if (targetRegions) {\n      for (const region of targetRegions) {\n        const outputRegion = {\n          provider: providerId,\n          region: region.region,\n          numRegions: region.numRegions\n        }\n        if (delegateId) {\n          outputRegion.delegate = delegateId\n        }\n        providerRegionsWithDelegates.push(outputRegion)\n      }\n    }\n  }\n  return providerRegionsWithDelegates.sort(sortProviderRecords)\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 615,
      "value": "syntheticProviderCSPRegions && button(syntheticProviderCSPRegions, `synthetic-provider-country-state-province-${minerRegionsCSPReport.epoch}.json`)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 636,
      "value": "providerRegions = d3.group(minerRegionsReport.minerRegions, d => d.miner)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 639,
      "value": "syntheticProviderRegions = {\n  if (!funderTreeWithDelegates) return\n  const providerRegionsWithDelegates = []\n  for (const provider of funderTreeWithDelegates.leaves()) {\n    const { miner_id: providerId, delegateId } = provider.data\n    const targetId = delegateId || providerId\n    const targetRegions = providerRegions.get(targetId)\n    if (targetRegions) {\n      for (const region of targetRegions) {\n        const outputRegion = {\n          provider: providerId,\n          region: region.region,\n          numRegions: region.numRegions\n        }\n        if (delegateId) {\n          outputRegion.delegate = delegateId\n        }\n        providerRegionsWithDelegates.push(outputRegion)\n      }\n    }\n  }\n  return providerRegionsWithDelegates.sort(sortProviderRecords)\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 641,
      "value": "syntheticProviderRegions && button(syntheticProviderRegions, `synthetic-provider-regions-${minerRegionsReport.epoch}.json`)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 612,
      "value": "## Synthetic Provider Locations",
      "pinned": true,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 622,
      "value": "providerCSPLocations = d3.group(minerLocationsCSPReport.minerLocations, d => d.miner)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 624,
      "value": "syntheticProviderCSPLocations = {\n  if (!funderTreeWithDelegates) return\n  const providerLocationsWithDelegates = []\n  for (const provider of funderTreeWithDelegates.leaves()) {\n    const { miner_id: providerId, delegateId } = provider.data\n    const targetId = delegateId || providerId\n    const targetLocations = providerCSPLocations.get(targetId)\n    if (targetLocations) {\n      for (const location of targetLocations) {\n        const { miner, ...rest } = location\n        const outputLocation = {\n          provider: providerId,\n          ...rest\n        }\n        if (delegateId) {\n          outputLocation.delegate = delegateId\n        }\n        providerLocationsWithDelegates.push(outputLocation)\n      }\n    }\n  }\n  return providerLocationsWithDelegates.sort(sortProviderRecords)\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 627,
      "value": "syntheticProviderCSPLocations && button(syntheticProviderCSPLocations, `synthetic-provider-country-state-province-locations-${minerLocationsCSPReport.epoch}.json`)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 649,
      "value": "providerLocations = d3.group(minerLocationsReport.minerLocations, d => d.miner)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 652,
      "value": "syntheticProviderLocations = {\n  if (!funderTreeWithDelegates) return\n  const providerLocationsWithDelegates = []\n  for (const provider of funderTreeWithDelegates.leaves()) {\n    const { miner_id: providerId, delegateId } = provider.data\n    const targetId = delegateId || providerId\n    const targetLocations = providerLocations.get(targetId)\n    if (targetLocations) {\n      for (const location of targetLocations) {\n        const { miner, ...rest } = location\n        const outputLocation = {\n          provider: providerId,\n          ...rest\n        }\n        if (delegateId) {\n          outputLocation.delegate = delegateId\n        }\n        providerLocationsWithDelegates.push(outputLocation)\n      }\n    }\n  }\n  return providerLocationsWithDelegates.sort(sortProviderRecords)\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 654,
      "value": "syntheticProviderLocations && button(syntheticProviderLocations, `synthetic-provider-locations-${minerLocationsReport.epoch}.json`)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 279,
      "value": "## Imports and Data",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 309,
      "value": "import {minerPowerDailyAverageLatestBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 311,
      "value": "minerPowerDailyAverageReport = (await fetch(`${minerPowerDailyAverageLatestBucketUrl}/miner-power-daily-average-latest.json`)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 740,
      "value": "minerPowerLatestReport = (await fetch(`${minerPowerDailyAverageLatestBucketUrl}/miner-power-latest.json`)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 316,
      "value": "import {geoIpLookupsBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 585,
      "value": "geoIpLookupsBucketUrl",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 632,
      "value": "minerRegionsReport = (await fetch(`${geoIpLookupsBucketUrl}/miner-regions-latest.json`)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 319,
      "value": "minerRegionsCSPReport = (await fetch(`${geoIpLookupsBucketUrl}/provider-country-state-province-latest.json`)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 645,
      "value": "minerLocationsReport = (await fetch(`${geoIpLookupsBucketUrl}/miner-locations-latest.json`)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 583,
      "value": "minerLocationsCSPReport = (await fetch(`${geoIpLookupsBucketUrl}/provider-country-state-province-locations-latest.json`)).json()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 288,
      "value": "sortIdRecords = ({ id: minerA }, { id: minerB }) => Number(minerA.slice(1)) - Number(minerB.slice(1))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 608,
      "value": "sortProviderRecords = ({ provider: providerA }, { provider: providerB }) => Number(providerA.slice(1)) - Number(providerB.slice(1))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 364,
      "value": "bytes = (await import('@jimpick/bytes-iec@3.1.0-2')).default",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 107,
      "value": "import { graph } from '@d3/d3-hierarchy'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 551,
      "value": "import {button} from '@jeremiak/download-data-button'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 730,
      "value": "import {dateToEpoch, epochToDate} from '@jbenet/filecoin-chain-time-calculator'",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 684,
      "value": "## Backups",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 688,
      "value": "import {backups, backupNowButton} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 691,
      "value": "backups()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    }
  ],
  "resolutions": []
}

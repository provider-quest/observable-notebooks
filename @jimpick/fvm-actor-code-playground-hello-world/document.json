{
  "id": "a153cf753740c27f",
  "slug": "fvm-actor-code-playground-hello-world",
  "trashed": false,
  "description": "",
  "likes": 1,
  "publish_level": "live",
  "forks": 2,
  "fork_of": {
    "id": "1f6a1da49a337f42",
    "slug": "codemirror-6",
    "title": "CodeMirror 6",
    "owner": {
      "id": "dbf69c13a14d2f62",
      "github_login": "visnup",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/b847c4c49993b1df7599d355f47dc0ad9c2dcf43439ce9e8f3410e6368b3aac9",
      "login": "visnup",
      "name": "Visnu Pitiyanuvath",
      "bio": "",
      "home_url": "https://twitter.com/visnup",
      "type": "individual",
      "tier": "pro"
    },
    "version": 136
  },
  "update_time": "2022-10-17T00:30:10.236Z",
  "publish_time": "2022-04-29T20:09:13.300Z",
  "publish_version": 789,
  "latest_version": 789,
  "thumbnail": null,
  "default_thumbnail": null,
  "roles": [],
  "sharing": null,
  "owner": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "type": "individual",
    "tier": "pro"
  },
  "creator": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "tier": "pro"
  },
  "authors": [
    {
      "id": "bda4505ba9a55ac8",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "name": "Jim Pick",
      "login": "jimpick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "github_login": "jimpick",
      "tier": "pro",
      "approved": true,
      "description": ""
    }
  ],
  "collections": [
    {
      "id": "f63e6c307ab87e8f",
      "type": "public",
      "slug": "filecoin-virtual-machine",
      "title": "Filecoin Virtual Machine",
      "description": "",
      "update_time": "2022-05-02T18:32:44.723Z",
      "pinned": false,
      "ordered": true,
      "custom_thumbnail": null,
      "default_thumbnail": null,
      "thumbnail": null,
      "listing_count": 7,
      "parent_collection_count": 0,
      "owner": {
        "id": "bda4505ba9a55ac8",
        "github_login": "jimpick",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
        "login": "jimpick",
        "name": "Jim Pick",
        "bio": "Freelance Filecoin developer in Victoria, Canada",
        "home_url": "https://github.com/jimpick",
        "type": "individual",
        "tier": "pro"
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "suggestion_from": null,
  "suggestions_to": [],
  "version": 789,
  "title": "FVM Actor Code Playground - \"Hello World\"",
  "license": "apache-2.0",
  "copyright": "Copyright 2022 Jim Pick",
  "nodes": [
    {
      "id": 0,
      "value": "# FVM Actor Code Playground - \"Hello World\"",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 154,
      "value": "Try making your own custom Filecoin actor for the [Filecoin Virtual Machine](https://fvm.filecoin.io/)!\n\nHere is the code from `src/lib.rc` in @raulk's [fil-hello-world-actor](https://github.com/raulk/fil-hello-world-actor) example on GitHub.\n\nYou can modify it here, then scroll down and click the buttons to compile it, then load it into a on-demand hosted [Lotus localnet](https://lotus.filecoin.io/developers/local-network/) created from the [experimental/fvm-m2](https://github.com/filecoin-project/lotus/tree/experimental/fvm-m2) branch, and invoke methods against it.\n\nI suggest first trying it out with the unmodified code. Once you understand what it is doing, try modifying the text on Line 118 from \"Hello world...\" to a custom message, and try the steps again to see your customized actor!\n\n**Note:** The on-demand localnet will be reclaimed after 3 minutes of inactivity. Modifications to the blockchain state are ephemeral -- good for testing! Staying on this page will keep it alive, but if you navigate away and then return, it may get restarted with fresh state. If that happens, reload the web page. There is one instance of the localnet shared between all users.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 243,
      "value": "## Step 1: Edit Actor Code - src/lib.rc\n\nFeel free to modify this actor code (written in Rust). Don't worry, you can't break anything. This is from [src/lib.rc](https://github.com/raulk/fil-hello-world-actor/blob/master/src/lib.rs) in @raulk's [fil-hello-world-actor](https://github.com/raulk/fil-hello-world-actor) example.\n\nGitHub Code Links + useful API Docs:\n\n * https://github.com/raulk/fil-hello-world-actor\n * https://github.com/raulk/fil-hello-world-actor/blob/master/src/blockstore.rs\n * https://github.com/raulk/fil-hello-world-actor/blob/master/Cargo.toml\n * https://docs.rs/fvm_sdk/0.6.1/fvm_sdk/\n * https://docs.rs/fvm_shared/0.6.1/fvm_shared/\n * https://docs.rs/cid/0.8.4/cid/\n * https://docs.rs/fvm_ipld_encoding/0.2.0/fvm_ipld_encoding/\n",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 4,
      "value": "viewof editor = {\n  const {EditorState, EditorView, basicSetup} = await skypack('@codemirror/next/basic-setup')\n  const {rust} = await skypack('@codemirror/next/lang-rust')\n  \n  const updateViewOf = EditorView.updateListener.of((update) => {\n    const {dom} = update.view\n    dom.value = update\n    dom.dispatchEvent(new CustomEvent('input'))\n  })\n\n  const initialCode = await (await fetch(initialCodeUrl)).text()\n  \n  const view = new EditorView({\n    state: EditorState.create({\n      doc: initialCode,\n      extensions: [basicSetup, rust(), updateViewOf]\n    })\n  })\n  \n  return view.dom\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 593,
      "value": "If you have changed the code and would like to save it for future use, you can use this button to save it to a file.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 589,
      "value": "html`Optional: ${button(editor.state.doc.toString(), `lib.rs`)}`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 597,
      "value": "**Pro-tip:** *You can also \"fork\" this notebook and use the saved file as an attachment.*",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 222,
      "value": "## Step 2: Compile\n\nWe have implemented a [simple web service](https://github.com/jimpick/lotus-fvm-localnet-web/blob/main/server.mjs) that accepts a HTTP POST with the code above, and returns a compiled WASM binary (wrapped in a CBOR array, encoded in base64, ready to pass as a 'params' string). The code above is substituted for `src/lib.rs` into the [raulk/fil-hello-world-actor](https://github.com/raulk/fil-hello-world-actor) example and built using `cargo build`. It should compile in less than 30 seconds.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 178,
      "value": "viewof compileToWasmButton = {\n  const code = editor.state.doc.toString()\n  return Inputs.button('Compile to WASM', {value: null, reduce: () => code})\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 385,
      "value": "{\n  if (compileStatus === undefined || !compileStatus) {\n    yield md`Status: Code is ready to upload to the compiling service. Not compiled yet.`\n    return\n  }\n  if (compileStatus.compiling) {\n    while (true) {\n      const elapsed = (Date.now() - compileStatus.start) / 1000\n      yield md`Compiling on remote server... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (compileStatus.success) {\n    yield html`<div><b>Successfully compiled!</b></div>\n    <div>Compile time: ${(compileStatus.elapsed / 1000).toFixed(1)}s\n    <div>Compile log:</div>\n    <pre>${stripAnsi(compileStatus.logs)}</pre>`\n  }\n  if (compileStatus.error) {\n    yield html`<div><b>**Error!**</b></div>\n    <div>Compile log:</div>\n    <pre>${stripAnsi(compileStatus.error)}</pre>`\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 617,
      "value": "compileStatus && compileStatus.wasmBinary ? md`Optional: You can download the compiled WASM bundle here. (Not needed if you are just using it from this notebook)` : md``",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 606,
      "value": "compileStatus && compileStatus.wasmBinary ? html`Optional: ${button(compileStatus.wasmBinary, 'fil_hello_world_actor.wasm')}` : md``",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 365,
      "value": "compileStatus = {\n  if (compileToWasmButton) {\n    const start = Date.now()\n    yield {\n      compiling: true,\n      start\n    }\n    try {\n      const response = await fetch(`${baseUrl}/compile`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'lib.rs': compileToWasmButton\n        })\n      })\n      const results = await response.json()\n      results.elapsed = Date.now() - start\n      if (results.success) {\n        results.wasmBinary = cbor.decode(results.wasmBinaryParamsEncoded, 'base64')\n      }\n      yield results\n    } catch (e) {\n      yield {\n        error: e.message\n      }\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 216,
      "value": "## Step 3: Connect to Hosted \"localnet\"\n\nThis notebook connects to a [hosted instance](https://github.com/jimpick/lotus-fvm-localnet-web) of a Lotus \"localnet\" (started on demand) into which you can install the actor code, create an actor instance, and invoke methods against.\n\nIf the localnet is started and online, the following chain height should be increasing every 4-10 seconds (depending on system load):",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 251,
      "value": "md`**Height: ${currentHeight}**`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 255,
      "value": "If the connection is working, then proceed to the next step.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 230,
      "value": "## Step 4: Install the Actor Code",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 497,
      "value": "Before the actor code can be executed, it must be loaded into the Filecoin blockchain state.\n\n# 💾\n\nIf you are old enough to remember, imagine this step as inserting the [floppy disk](https://en.wikipedia.org/wiki/Floppy_disk) into the Filecoin global computer's floppy drive!\n\nAt the command line, this is the same as: `lotus chain install-actor <wasm-file>`",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 180,
      "value": "viewof installActorButton = Inputs.button('Install Actor Code', {\n  disabled: !compileStatus || !compileStatus.wasmBinaryParamsEncoded,\n  value: null,\n  reduce: () => compileStatus.wasmBinaryParamsEncoded\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 468,
      "value": "{\n  if (installActorStatus === undefined || !installActorStatus) {\n    yield md`Status: Latest actor code is compiled to WASM, but not installed yet.`\n    return\n  }\n  if (installActorStatus.installing) {\n    while (true) {\n      const elapsed = (Date.now() - installActorStatus.start) / 1000\n      yield md`Sending install actor message... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (installActorStatus.response) {\n    while (true) {\n      let output = `<div><b>Install actor message sent</b></div>\n      <div>Message CID: ${installActorStatus.response.CID['/']}</div>`\n      if (installActorStatus.waitResponse) {\n        output += `<div>Message executed in block at height: ${installActorStatus.waitResponse.Height}</div>`\n        output += `<div>Gas used: ${installActorStatus.waitResponse.Receipt.GasUsed}</div>`\n        output += `<div><b>Code CID: ${installActorStatus.codeCid}</b></div>`\n        yield html`${output}`\n        break\n      }\n      const elapsed = (Date.now() - installActorStatus.waitStart) / 1000\n      output += `<div>Waiting for message to be executed in a block... (${elapsed.toFixed(1)}s)</div>`\n      yield html`${output}`\n      await Promises.delay(1000)\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 744,
      "value": "---",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 369,
      "value": "installActorStatus = {\n  if (installActorButton) {\n    console.log('Install actor')\n    const start = Date.now()\n    yield {\n      installing: true,\n      start\n    }\n    // Sending install actor message...\n    const messageBody = {\n      To: 't01',\n      From: walletDefaultAddress,\n      Value: \"0\",\n      Method: 4,\n      Params: compileStatus.wasmBinaryParamsEncoded\n    }\n    const response = await client.mpoolPushMessage(messageBody, null)\n    const waitStart = Date.now()\n    yield { waiting: true, waitStart, response }\n    const waitResponse = await client.stateWaitMsg(response.CID, 0)\n    let decodedCid\n    if (waitResponse.Receipt.ExitCode === 0) {\n      const result = cbor.decode(waitResponse.Receipt.Return, 'base64')\n      const codeCid = multiformats.CID.decode(result[0].value.slice(1)).toString()\n      yield { installed: true, response, waitResponse, codeCid }\n    } else {\n      yield { installed: false, response, waitResponse }\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 234,
      "value": "## Step 5: Create an Actor Instance",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 655,
      "value": "If you have completed the previous step, you will have a \"Code CID\" for the WASM bundle you just installed. Now we can create an actor instance. It is possible to create lots and lots of actors using the same code, each will get assigned a unique \"ID Address\" (eg. t01001) to which messages and funds can be sent, as well as an equivalent \"Robust Address\" alias (eg. \"t2...\") which maps on the same address (but doesn't change in the event of a chain re-organization).",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 492,
      "value": "At the command line, this is the same as: `lotus chain create-actor <code-cid>`",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 184,
      "value": "viewof createActorButton = Inputs.button('Create Actor', {\n  disabled: !installActorStatus || !installActorStatus.codeCid,\n  value: null,\n  reduce: () => installActorStatus.codeCid\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 548,
      "value": "{\n  if (createActorStatus === undefined || !createActorStatus) {\n    yield md`Status: Instance of latest installed actor has not been created yet.`\n    return\n  }\n  if (createActorStatus.creating) {\n    while (true) {\n      const elapsed = (Date.now() - createActorStatus.start) / 1000\n      yield md`Sending create actor message... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (createActorStatus.response) {\n    while (true) {\n      let output = `<div><b>Create actor message sent</b></div>\n      <div>Code CID (Param): ${createActorButton}</div>\n      <div>Message CID: ${createActorStatus.response.CID['/']}</div>\n      `\n      if (createActorStatus.waitResponse) {\n        output += `<div>Message executed in block at height: ${createActorStatus.waitResponse.Height}</div>`\n        output += `<div>Gas used: ${createActorStatus.waitResponse.Receipt.GasUsed}</div>`\n        output += `<div>Robust Address: ${createActorStatus.waitResponse.ReturnDec.RobustAddress}</div>`\n        output += `<b><div>ID Address: ${createActorStatus.waitResponse.ReturnDec.IDAddress}</div></b>`\n        yield html`${output}`\n        break\n      }\n      const elapsed = (Date.now() - createActorStatus.waitStart) / 1000\n      output += `<div>Waiting for message to be executed in a block... (${elapsed.toFixed(1)}s)</div>`\n      yield html`${output}`\n      await Promises.delay(1000)\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 749,
      "value": "---",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 485,
      "value": "createActorStatus = {\n  if (createActorButton) {\n    console.log('Create actor')\n    const start = Date.now()\n    yield {\n      creating: true,\n      start\n    }\n    const codeCid = multiformats.CID.parse(createActorButton)\n    // Needs a zero byte in front\n    const codeCidBytes = new Uint8Array(codeCid.bytes.length + 1)\n    codeCidBytes.set(codeCid.bytes, 1)\n    const params = cbor.encode([new cbor.Tagged(42, codeCidBytes), new Uint8Array(0)])\n    // Sending create actor message...\n    const messageBody = {\n      To: 't01',\n      From: walletDefaultAddress,\n      Value: \"0\",\n      Method: 2,\n      Params: params.toString('base64')\n    }\n    console.log('messageBody', messageBody)\n    const response = await client.mpoolPushMessage(messageBody, null)\n    const waitStart = Date.now()\n    yield { waiting: true, waitStart, response }\n    const waitResponse = await client.stateWaitMsg(response.CID, 0)\n    yield { installed: true, response, waitResponse }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 238,
      "value": "## Step 6: Invoke a Method on the Instance",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 666,
      "value": "Now that we've got an actor running with an ID Address, we can call the method we have defined. In the Hello World example, method #2 is dispatched in the invoke() function to call the say_hello() function, which returns a message (with a counter that increments each time it is called).",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 671,
      "value": "At the command line, this is the same as: `lotus chain invoke <actor-id-address> <method-number>`",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 187,
      "value": "viewof invokeMethod2Button = Inputs.button('Invoke Method #2', {\n  disabled: !createActorStatus ||\n    !createActorStatus.waitResponse ||\n    !createActorStatus.waitResponse.ReturnDec ||\n    !createActorStatus.waitResponse.ReturnDec.IDAddress,\n  value: null,\n  reduce: () => createActorStatus.waitResponse.ReturnDec.IDAddress\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 678,
      "value": "{\n  if (invokeMethod2Status === undefined || !invokeMethod2Status) {\n    yield md`Status: Method has not been invoked yet.`\n    return\n  }\n  if (invokeMethod2Status.invoking) {\n    while (true) {\n      const elapsed = (Date.now() - invokeMethod2Status.start) / 1000\n      yield md`Sending message to actor for method 2... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (invokeMethod2Status.response) {\n    while (true) {\n      let output = `<div><b>Message sent to actor</b></div>\n      <div>To: ${invokeMethod2Button}</div>\n      <div>Method: 2</div>\n      <div>Message CID: ${invokeMethod2Status.response.CID['/']}</div>\n      `\n      if (invokeMethod2Status.waitResponse) {\n        output += `<div>Message executed in block at height: ${invokeMethod2Status.waitResponse.Height}</div>`\n        output += `<div>Gas used: ${invokeMethod2Status.waitResponse.Receipt.GasUsed}</div>`\n        output += `<div>Return: ${invokeMethod2Status.waitResponse.Receipt.Return} (Base64 encoded CBOR)</div>`\n        output += `<div><b>Decoded Result:</b> <b style=\"font-size: 200%\">${JSON.stringify(invokeMethod2Status.decodedResult)}</b></div>`\n        yield html`${output}`\n        break\n      }\n      const elapsed = (Date.now() - invokeMethod2Status.waitStart) / 1000\n      output += `<div>Waiting for message to be executed in a block... (${elapsed.toFixed(1)}s)</div>`\n      yield html`${output}`\n      await Promises.delay(1000)\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 687,
      "value": "Each time you invoke method 2, it will increment a counter which is stored in the actor state (unless you have modified the code to not do that). Try it again to see the decoded result change each time.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 681,
      "value": "Inputs.bind(Inputs.button('Invoke Method #2 again!', {\n  disabled: !createActorStatus ||\n    !createActorStatus.waitResponse ||\n    !createActorStatus.waitResponse.ReturnDec ||\n    !createActorStatus.waitResponse.ReturnDec.IDAddress,\n  value: null,\n  reduce: () => createActorStatus.waitResponse.ReturnDec.IDAddress\n}), viewof invokeMethod2Button)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 747,
      "value": "---",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 572,
      "value": "invokeMethod2Status = {\n  if (invokeMethod2Button) {\n    const start = Date.now()\n    yield {\n      invoking: true,\n      start\n    }\n    const messageBody = {\n      To: invokeMethod2Button,\n      From: walletDefaultAddress,\n      Value: \"0\",\n      Method: 2,\n      Params: null\n    }\n    console.log('messageBody', messageBody)\n    const response = await client.mpoolPushMessage(messageBody, null)\n    const waitStart = Date.now()\n    yield { waiting: true, waitStart, response }\n    const waitResponse = await client.stateWaitMsg(response.CID, 0)\n    let decodedResult\n    if (waitResponse.Receipt && waitResponse.Receipt.Return) {\n      decodedResult = cbor.decodeAll(waitResponse.Receipt.Return, 'base64')\n    }\n    yield { invoked: true, response, waitResponse, decodedResult }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 693,
      "value": "# Final notes",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 695,
      "value": "Thank you for trying out this demo.\n\nIf the backend is not working, please get in touch with me. Feel free to fork this notebook to customize your own actors and build scenarios using the on-demand localnet that supports this early version of actors / smart contracts.\n\nI can also deploy custom instances of the localnet and the API for compiling actors ... feel free to contact me at @jimpick on the Filecoin Slack.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 150,
      "value": "## Imports",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 50,
      "value": "skypack = (library) => import(`https://cdn.skypack.dev/${library}?min`)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 198,
      "value": "LotusRPC = (await import('@filecoin-shipyard/lotus-client-rpc')).LotusRPC",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 205,
      "value": "BrowserProvider = (await import('@filecoin-shipyard/lotus-client-provider-browser')).BrowserProvider",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 211,
      "value": "schema = (await import('@filecoin-shipyard/lotus-client-schema')).mainnet.fullNode",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 402,
      "value": "stripAnsi = (await import('https://unpkg.com/strip-ansi@7.0.1/index.js?module')).default",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 501,
      "value": "cbor = import('https://cdn.skypack.dev/borc')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 727,
      "value": "multiformats = import('https://cdn.skypack.dev/pin/multiformats@v9.6.5-93rn6JH3zqEZdoz77NBu/mode=imports,min/optimized/multiformats.js')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 584,
      "value": "import {button} from '@jimpick/download-data-button-with-wasm-support'",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 270,
      "value": "## Lotus Utilities",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 171,
      "value": "initialCodeUrl = `https://raw.githubusercontent.com/raulk/fil-hello-world-actor/695eed038c48bfff97c29fdc25d00aa7363ee47d/src/lib.rs`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 373,
      "value": "baseUrl = \"https://fvm-7.default.knative.hex.camp\"",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 355,
      "value": "token = (await fetch(`${baseUrl}/public/token`)).text()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 209,
      "value": "client = {\n  const provider = new BrowserProvider(`${baseUrl}/rpc/v0`, { token })\n  return new LotusRPC(provider, { schema })\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 303,
      "value": "async function *heightStream () {\n  let last\n  while (true) {\n    try {\n      const newHeight = (await client.chainHead()).Height\n      if (newHeight !== last) {\n        yield newHeight\n        last = newHeight\n      }\n    } catch (e) {\n      yield 0\n    }\n    await Promises.delay(4000)\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 328,
      "value": "mutable ready = false",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 312,
      "value": "async function *heightReadyTapStream () {\n  let lastReady = false\n  for await (const height of heightStream()) {\n    const newReady = height > 7\n    if (newReady !== lastReady) {\n      mutable ready = newReady\n      lastReady = newReady\n    }\n    yield height\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 308,
      "value": "currentHeight = heightReadyTapStream()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 353,
      "value": "walletDefaultAddress = ready && client.walletDefaultAddress()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 780,
      "value": "## Backups",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 752,
      "value": "import {backups, backupNowButton} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 783,
      "value": "backups()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 786,
      "value": "backupNowButton()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    }
  ],
  "resolutions": [
    {
      "type": "notebook",
      "specifier": "@jeremiak/download-data-button",
      "value": "bedb50933413e557@45"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/github-backups",
      "value": "1d309dbd9697e042@631"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/onversion",
      "value": "8aac8b2cb06bf434@263"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/footer",
      "value": "58f3eb7334551ae6@215"
    },
    {
      "type": "notebook",
      "specifier": "@mbostock/safe-local-storage",
      "value": "c2dae147641e012a@46"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/sentry",
      "value": "a81f2a20664080d3@245"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/catch-all",
      "value": "fa1f6059e44da1d5@425"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/repository-dispatch-min",
      "value": "b09f1f038b1040e3@76"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/webcode",
      "value": "6eda90668ae03044@836"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/webcode-ui",
      "value": "cbc2e7f6260d11b1@2790"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/endpoint-login-with-comment",
      "value": "027541187c96745d@147"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/login-with-comment",
      "value": "c16efae137e70585@1444"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/firebase",
      "value": "993a0c51ef1175ea@1396"
    },
    {
      "type": "notebook",
      "specifier": "@mbostock/synchronized-views",
      "value": "3df1b33bb2cfcd3c@475"
    },
    {
      "type": "notebook",
      "specifier": "@mbostock/disposal",
      "value": "4caee69e966109c8@35"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/get-comments",
      "value": "d84ccee0a2202d45@356"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/view",
      "value": "f92778131fd76559@1174"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/endpoint-services-footer",
      "value": "58f3eb7334551ae6@215"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/viewroutine",
      "value": "4a1fa3c167b752e5@304"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/serverless-cells",
      "value": "dff1e917c89f5e76@1964"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/secure-random-id@65",
      "value": "316f0885d15ab671@65"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/firebase-admin",
      "value": "698257e86fae4586@378"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/utils",
      "value": "b8a500058f806a6b@11"
    },
    {
      "type": "notebook",
      "specifier": "@nebrius/indented-toc",
      "value": "9bed702f80a3797e@402"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/randomid",
      "value": "316f0885d15ab671@69"
    },
    {
      "type": "notebook",
      "specifier": "@mootari/notebook-data",
      "value": "55bed46f68a80641@366"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/metadata",
      "value": "e6f8b27a19576fcb@428"
    }
  ]
}

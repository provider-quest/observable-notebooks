{
  "id": "98ea42d48a05c8ca",
  "slug": "fvm-actor-code-playground-simplecoin-evm-contract",
  "trashed": false,
  "description": "",
  "likes": 1,
  "publish_level": "live",
  "forks": 2,
  "fork_of": {
    "id": "a153cf753740c27f",
    "slug": "fvm-actor-code-playground-hello-world",
    "title": "FVM Actor Code Playground - \"Hello World\"",
    "owner": {
      "id": "bda4505ba9a55ac8",
      "github_login": "jimpick",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "login": "jimpick",
      "name": "Jim Pick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "type": "individual",
      "tier": "public",
      "following_count": 0,
      "followers_count": 1,
      "following": false
    },
    "version": 736
  },
  "has_importers": false,
  "update_time": "2022-10-18T23:39:20.283Z",
  "first_public_version": 1090,
  "paused_version": null,
  "publish_time": "2022-09-01T02:24:12.996Z",
  "publish_version": 1130,
  "latest_version": 1130,
  "thumbnail": "fdb055590bbd165d6f8884e25c232fceea6802105af3c0b6bb55ffecc2305e94",
  "default_thumbnail": "fdb055590bbd165d6f8884e25c232fceea6802105af3c0b6bb55ffecc2305e94",
  "roles": [],
  "sharing": null,
  "tags": [],
  "owner": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "type": "individual",
    "tier": "public",
    "following_count": 0,
    "followers_count": 1,
    "following": false
  },
  "creator": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "tier": "public",
    "following_count": 0,
    "followers_count": 1,
    "following": false
  },
  "authors": [
    {
      "id": "bda4505ba9a55ac8",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "name": "Jim Pick",
      "login": "jimpick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "github_login": "jimpick",
      "tier": "public",
      "approved": true,
      "description": "",
      "following_count": 0,
      "followers_count": 1,
      "following": false
    }
  ],
  "collections": [
    {
      "id": "f63e6c307ab87e8f",
      "type": "public",
      "slug": "filecoin-virtual-machine",
      "title": "Filecoin Virtual Machine",
      "description": "",
      "update_time": "2022-05-02T18:32:44.723Z",
      "pinned": false,
      "ordered": true,
      "custom_thumbnail": null,
      "default_thumbnail": "d7e424587096d8879ea053a283442539d7fd316a31da892cac162e6cb12b1dab",
      "thumbnail": "d7e424587096d8879ea053a283442539d7fd316a31da892cac162e6cb12b1dab",
      "listing_count": 8,
      "parent_collection_count": 0,
      "owner": {
        "id": "bda4505ba9a55ac8",
        "github_login": "jimpick",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
        "login": "jimpick",
        "name": "Jim Pick",
        "bio": "Freelance Filecoin developer in Victoria, Canada",
        "home_url": "https://github.com/jimpick",
        "type": "individual",
        "tier": "public",
        "following_count": 0,
        "followers_count": 1,
        "following": false
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "suggestion_from": null,
  "suggestions_to": [],
  "version": 1130,
  "title": "FVM Actor Code Playground - SimpleCoin EVM Contract",
  "license": "apache-2.0",
  "copyright": "Copyright 2022 Jim Pick",
  "nodes": [
    {
      "id": 0,
      "value": "# FVM Actor Code Playground - SimpleCoin EVM Contract",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 154,
      "value": "Try making your own custom Filecoin actor for the [Filecoin Virtual Machine](https://fvm.filecoin.io/)!\n\nHere is an example EVM Smart Contract, from:\n\n* https://github.com/filecoin-project/testnet-wallaby/issues/9\n\nYou can modify it here, then scroll down and click the buttons to compile it, then load it into a on-demand hosted [Lotus localnet](https://lotus.filecoin.io/developers/local-network/) created from the [experimental/fvm-m2](https://github.com/filecoin-project/lotus/tree/experimental/fvm-m2) branch, and invoke methods against it.\n\n**Note:** The on-demand localnet will be reclaimed after 3 minutes of inactivity. Modifications to the blockchain state are ephemeral -- good for testing! Staying on this page will keep it alive, but if you navigate away and then return, it may get restarted with fresh state. If that happens, reload the web page. There is one instance of the localnet shared between all users.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 967,
      "value": "Video demo:\n\n* YouTube: [FVM Foundry Update: FEVM Actor Example with Fil-der Jim Pick](https://www.youtube.com/watch?v=IN3zGTiFFK8)",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 243,
      "value": "## Step 1: Edit Smart Contract Code - simplecoin.sol\n\nFeel free to modify this smart contract code (written in Solidity). Don't worry, you can't break anything. \n",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 4,
      "value": "viewof editor = {\n  const {EditorState, EditorView, basicSetup} = await skypack('@codemirror/next/basic-setup')\n  // const {basicSetup} = await skypack('codemirror')\n  // const {EditorView} = await skypack('@codemirror/view')\n  // const {EditorState} = await skypack('@codemirror/state')\n  // const {EditorState, EditorView, basicSetup} = await skypack('@codemirror/basic-setup@0.19.0')\n  // const {solidity} = await skypack('@replit/codemirror-lang-solidity')\n\n  let lastValue\n  const updateViewOf = EditorView.updateListener.of((update) => {\n    const {dom} = update.view\n    dom.value = update\n    const newValue = update.state.doc.toString()\n    if (newValue !== lastValue) {\n      dom.dispatchEvent(new CustomEvent('input'))\n      lastValue = newValue\n    }\n  })\n\n  const initialCode = simpleCoinSol\n  \n  const view = new EditorView({\n    state: EditorState.create({\n      doc: initialCode,\n      extensions: [basicSetup, updateViewOf]\n      // extensions: [basicSetup, solidity, updateViewOf]\n    })\n  })\n  \n  return view.dom\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 593,
      "value": "If you have changed the code and would like to save it for future use, you can use this button to save it to a file.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 589,
      "value": "html`Optional: ${button(editor.state.doc.toString(), `contract.sol`)}`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 597,
      "value": "**Pro-tip:** *You can also \"fork\" this notebook and use the saved file as an attachment.*",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 222,
      "value": "## Step 2: Compile\n\nWe have implemented a [simple web service](https://github.com/jimpick/lotus-fvm-localnet-web/blob/main/server.mjs) that accepts a HTTP POST with the code above, and runs it through the Solidity compiler, returning compiled EVM bytecode (encoded in base64). It should compile quickly.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 178,
      "value": "viewof compileToEvmBytecodeButton = {\n  const code = editor.state.doc.toString()\n  return Inputs.button('Compile to EVM Bytecode', {value: null, reduce: () => code})\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 385,
      "value": "{\n  if (compileStatus === undefined || !compileStatus) {\n    yield md`Status: Code is ready to upload to the compiling service. Not compiled yet.`\n    return\n  }\n  if (compileStatus.compiling) {\n    while (true) {\n      const elapsed = (Date.now() - compileStatus.start) / 1000\n      yield md`Compiling on remote server... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (compileStatus.success) {\n    yield html`<div><b>Successfully compiled!</b></div>\n    <div>Compile time: ${(compileStatus.elapsed / 1000).toFixed(1)}s\n    <div>Compile log:</div>\n    <pre>${stripAnsi(compileStatus.logs)}</pre>`\n  }\n  if (compileStatus.error) {\n    yield html`<div><b>**Error!**</b></div>\n    <div>Compile log:</div>\n    <pre>${stripAnsi(compileStatus.error)}</pre>`\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 960,
      "value": "{\n  return compileStatus?.evmSignatures ? md`**Signatures:**\\n\\n\\`\\`\\`\\n${compileStatus.evmSignatures}\\n\\`\\`\\`` : md``\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 365,
      "value": "compileStatus = {\n  if (compileToEvmBytecodeButton) {\n    const start = Date.now()\n    yield {\n      compiling: true,\n      start\n    }\n    try {\n      const response = await fetch(`${baseUrl}/compile-evm`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'contract.sol': compileToEvmBytecodeButton\n        })\n      })\n      const results = await response.json()\n      results.elapsed = Date.now() - start\n      if (results.success) {\n        results.evmBinary = buffer.Buffer.from(results.evmBinary, 'hex')\n      }\n      yield results\n    } catch (e) {\n      yield {\n        error: e.message\n      }\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 216,
      "value": "## Step 3: Connect to Hosted \"localnet\"\n\nThis notebook connects to a [hosted instance](https://github.com/jimpick/lotus-fvm-localnet-web) of a Lotus \"localnet\" (started on demand) into which you can install the actor code, create an actor instance, and invoke methods against.\n\nIf the localnet is started and online, the following chain height should be increasing every 4-10 seconds (depending on system load):",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 251,
      "value": "md`**Height: ${currentHeight}**`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 255,
      "value": "If the connection is working, then proceed to the next step.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 234,
      "value": "## Step 4: Create an EVM Actor Instance",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 655,
      "value": "Now we can create an actor instance from the compiled EVM smart contract. It is possible to create lots and lots of actors using the same code, each will get assigned a unique \"ID Address\" (eg. t01001) to which messages and funds can be sent, as well as an equivalent \"Robust Address\" alias (eg. \"t2...\") which maps on the same address (but doesn't change in the event of a chain re-organization).",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 492,
      "value": "At the command line, this is the same as: `lotus chain create-evm-actor <bytecode file>`",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 184,
      "value": "viewof createActorButton = Inputs.button(\n  'Create EVM Actor',\n  {\n    disabled: !compileStatus || !compileStatus.evmBinary || !ready\n  }\n)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 548,
      "value": "{\n  if (createActorStatus === undefined || !createActorStatus) {\n    yield md`Status: Instance has not been created yet.`\n    return\n  }\n  if (createActorStatus.creating) {\n    while (true) {\n      const elapsed = (Date.now() - createActorStatus.start) / 1000\n      yield md`Sending create actor message... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (createActorStatus.response) {\n    while (true) {\n      let output = `<div><b>Create actor message sent</b></div>\n      <div>Message CID: ${createActorStatus.response.CID['/']}</div>\n      `\n      if (createActorStatus.waitResponse) {\n        output += `<div>Message executed in block at height: ${createActorStatus.waitResponse.Height}</div>`\n        output += `<div>Gas used: ${createActorStatus.waitResponse.Receipt.GasUsed}</div>`\n        output += `<div>Robust Address: ${createActorStatus.waitResponse.ReturnDec.RobustAddress}</div>`\n        output += `<b><div>ID Address: ${createActorStatus.waitResponse.ReturnDec.IDAddress}</div></b>`\n        yield html`${output}`\n        break\n      }\n      const elapsed = (Date.now() - createActorStatus.waitStart) / 1000\n      output += `<div>Waiting for message to be executed in a block... (${elapsed.toFixed(1)}s)</div>`\n      yield html`${output}`\n      await Promises.delay(1000)\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1084,
      "value": "---",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 832,
      "value": "evmActorCidBytes = buffer.Buffer.from('0155a0e40220181b777f5ef350eec940db54a56b2a4e685f357f54ffa73f34e72e575baaeba9', 'hex')",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 836,
      "value": "evmActorCid = multiformats.CID.decode(evmActorCidBytes)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1043,
      "value": "evmActorCid.toString()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 794,
      "value": "evmBytes = {\n  return compileStatus?.evmBinary\n  // return new Uint8Array(await FileAttachment(\"simplecoin.bin\").arrayBuffer())\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 838,
      "value": "evmBytesCbor = cbor.encode([evmBytes])",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 485,
      "value": "createActorStatus = {\n  if (createActorButton) {\n    console.log('Create actor')\n    const start = Date.now()\n    yield {\n      creating: true,\n      start\n    }\n    // Needs a zero byte in front\n    const evmActorCidBytes = new Uint8Array(evmActorCid.bytes.length + 1)\n    evmActorCidBytes.set(evmActorCid.bytes, 1)\n    const params = cbor.encode([new cbor.Tagged(42, evmActorCidBytes), evmBytesCbor])\n    // Sending create actor message...\n    const messageBody = {\n      To: 't01',\n      From: walletDefaultAddress,\n      Value: \"0\",\n      Method: 2,\n      Params: params.toString('base64')\n    }\n    console.log('messageBody', messageBody)\n    const response = await client.mpoolPushMessage(messageBody, null)\n    const waitStart = Date.now()\n    yield { waiting: true, waitStart, response }\n    const waitResponse = await client.stateWaitMsg(response.CID, 0)\n    yield { installed: true, response, waitResponse }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 827,
      "value": "**Reference:** Lotus CLI implementation for `lotus chain create-evm-actor`: https://github.com/filecoin-project/lotus/blob/65581c5aacd0f5e61e1cd9363310a1b0655b9611/cli/chain.go#L1773",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 238,
      "value": "## Step 5: Invoke a method to get the balance for an address",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 666,
      "value": "Now that we've got an actor running with an ID Address, we can call the methods we have defined. Let's check the balance of the addresses. The method signature (from above) to get the balance is => `f8b2cb4f: getBalance(address)`",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 870,
      "value": "viewof invokeParams = Inputs.select(\n  [\n    {\n      label: 'Owner t0100 (0x64)',\n      value: '000000000000000000000000ff00000000000000000000000000000000000064'\n    },\n    {\n      label: 'Non-owner t0101 (0x65)',\n      value: '000000000000000000000000ff00000000000000000000000000000000000065'\n    }\n  ],\n  {\n    label: \"Address\",\n    format: x => x.label\n  }\n)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 866,
      "value": "md`From the Lotus command line, we could call the method like this:\n\n\\`./lotus chain invoke-evm-actor ${createActorStatus.waitResponse.ReturnDec.IDAddress} f8b2cb4f ${invokeParams.value}\\``",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 187,
      "value": "viewof invokeEvmMethodButton = Inputs.button('Invoke EVM Method', {\n  disabled: !createActorStatus ||\n    !createActorStatus.waitResponse ||\n    !createActorStatus.waitResponse.ReturnDec ||\n    !createActorStatus.waitResponse.ReturnDec.IDAddress,\n  value: null,\n  reduce: () => createActorStatus.waitResponse.ReturnDec.IDAddress\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 678,
      "value": "{\n  if (invokeEvmMethodStatus === undefined || !invokeEvmMethodStatus) {\n    yield md`Status: Method has not been invoked yet.`\n    return\n  }\n  if (invokeEvmMethodStatus.invoking) {\n    while (true) {\n      const elapsed = (Date.now() - invokeEvmMethodStatus.start) / 1000\n      yield md`Sending message to actor for method... (${elapsed.toFixed(1)}s)`\n      await Promises.delay(1000)\n    }\n  }\n  if (invokeEvmMethodStatus.response) {\n    while (true) {\n      let output = `<div><b>Message sent to actor</b></div>\n      <div>To: ${invokeEvmMethodButton}</div>\n      <div>Method: 2</div>\n      <div>Params:\n        <ul style=\"font-size: 80%\">\n          <li>Address: ${invokeEvmMethodStatus.address}</li>\n        </ul>\n      </div>\n      <div>Message CID: ${invokeEvmMethodStatus.response.CID['/']}</div>\n      `\n      if (invokeEvmMethodStatus.waitResponse) {\n        output += `<div>Message executed in block at height: ${invokeEvmMethodStatus.waitResponse.Height}</div>`\n        output += `<div>Gas used: ${invokeEvmMethodStatus.waitResponse.Receipt.GasUsed}</div>`\n        output += `<div>Return: ${invokeEvmMethodStatus.waitResponse.Receipt.Return} (Base64 encoded binary array)</div>`\n        output += `<div><b>Decoded Result (Hex):</b> <b style=\"font-size: 100%\">${JSON.stringify(invokeEvmMethodStatus.decodedResult.toString('hex'))}</b></div>`\n        output += `<div><b>Decoded Result (Decimal):</b> <b style=\"font-size: 100%\">${Number(`0x${invokeEvmMethodStatus.decodedResult.toString('hex')}`)} coins</b></div>`\n        yield html`${output}`\n        break\n      }\n      const elapsed = (Date.now() - invokeEvmMethodStatus.waitStart) / 1000\n      output += `<div>Waiting for message to be executed in a block... (${elapsed.toFixed(1)}s)</div>`\n      yield html`${output}`\n      await Promises.delay(1000)\n    }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 912,
      "value": "Initial expected results:\n\n* For Owner (0x64) ... it should return a value of \"0x0..2710\" (0x2710 = 10000, as there are initially 10,000 coins associated with the owner address)\n* For Non-Owner (0x65) ... it should return a value of \"0x0..0000\" (the are no coins associated with the non-owner address)",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 1082,
      "value": "---",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 572,
      "value": "invokeEvmMethodStatus = {\n  if (invokeEvmMethodButton) {\n    const start = Date.now()\n    const address = viewof invokeParams.value.value\n    yield {\n      invoking: true,\n      address,\n      start\n    }\n    const params = buffer.Buffer.concat([\n      buffer.Buffer.from('f8b2cb4f', 'hex'),\n      buffer.Buffer.from(address, 'hex')]\n    )\n    const messageBody = {\n      To: invokeEvmMethodButton,\n      From: walletDefaultAddress,\n      Value: \"0\",\n      Method: 2,\n      Params: params.toString('base64')\n    }\n    console.log('messageBody', messageBody)\n    const response = await client.mpoolPushMessage(messageBody, null)\n    const waitStart = Date.now()\n    yield { waiting: true, waitStart, address, response }\n    const waitResponse = await client.stateWaitMsg(response.CID, 0)\n    let decodedResult\n    if (waitResponse.Receipt && waitResponse.Receipt.Return) {\n      decodedResult = buffer.Buffer.from(waitResponse.Receipt.Return, 'base64')\n    }\n    yield { invoked: true, address, response, waitResponse, decodedResult }\n  }\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 887,
      "value": "**Reference:** Lotus CLI implementation for `lotus chain invoke-evm-actor`: https://github.com/filecoin-project/lotus/blob/65581c5aacd0f5e61e1cd9363310a1b0655b9611/cli/chain.go#L1891",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 693,
      "value": "# Final notes",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 695,
      "value": "Thank you for trying out this demo.\n\nIf the backend is not working, please get in touch with me. Feel free to fork this notebook to customize your own actors and build scenarios using the on-demand localnet that supports this early version of actors / smart contracts.\n\nI can also deploy custom instances of the localnet and the API for compiling actors ... feel free to contact me at @jimpick on the Filecoin Slack.",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 150,
      "value": "## Imports",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 50,
      "value": "skypack = (library) => import(`https://cdn.skypack.dev/${library}?min`)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 198,
      "value": "LotusRPC = (await import('@filecoin-shipyard/lotus-client-rpc')).LotusRPC",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 205,
      "value": "BrowserProvider = (await import('@filecoin-shipyard/lotus-client-provider-browser')).BrowserProvider",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 211,
      "value": "schema = (await import('@filecoin-shipyard/lotus-client-schema')).mainnet.fullNode",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 402,
      "value": "stripAnsi = (await import('https://unpkg.com/strip-ansi@7.0.1/index.js?module')).default",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 501,
      "value": "cbor = import('https://cdn.skypack.dev/borc')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 727,
      "value": "multiformats = import('https://cdn.skypack.dev/pin/multiformats@v9.6.5-93rn6JH3zqEZdoz77NBu/mode=imports,min/optimized/multiformats.js')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 584,
      "value": "import {button} from '@jimpick/download-data-button-with-wasm-support'",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 821,
      "value": "buffer = require('https://bundle.run/buffer@6.0.3')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 270,
      "value": "## Lotus Utilities",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 743,
      "value": "simpleCoinSol = `\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.25 <= 0.8.17;\n\ncontract SimpleCoin {\n        mapping (address => uint) balances;\n\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n        constructor() {\n                balances[tx.origin] = 10000;\n        }\n\n        function sendCoin(address receiver, uint amount) public returns(bool sufficient) {\n                if (balances[msg.sender] < amount) return false;\n                balances[msg.sender] -= amount;\n                balances[receiver] += amount;\n                emit Transfer(msg.sender, receiver, amount);\n                return true;\n        }\n\n        function getBalanceInEth(address addr) public view returns(uint){\n                return getBalance(addr) * 2;\n        }\n\n        function getBalance(address addr) public view returns(uint) {\n                return balances[addr];\n        }\n}\n`.trim()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 171,
      "value": "initialCodeUrl = `https://raw.githubusercontent.com/raulk/fil-hello-world-actor/695eed038c48bfff97c29fdc25d00aa7363ee47d/src/lib.rs`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 373,
      "value": "baseUrl = \"https://fvm-8.default.knative.hex.camp\"",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 355,
      "value": "token = (await fetch(`${baseUrl}/public/token`)).text()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 209,
      "value": "client = {\n  const provider = new BrowserProvider(`${baseUrl}/rpc/v0`, { token })\n  return new LotusRPC(provider, { schema })\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 303,
      "value": "async function *heightStream () {\n  let last\n  while (true) {\n    try {\n      const newHeight = (await client.chainHead()).Height\n      if (newHeight !== last) {\n        yield newHeight\n        last = newHeight\n      }\n    } catch (e) {\n      yield 0\n    }\n    await Promises.delay(4000)\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 328,
      "value": "mutable ready = false",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 312,
      "value": "async function *heightReadyTapStream () {\n  let lastReady = false\n  for await (const height of heightStream()) {\n    const newReady = height > 7\n    if (newReady !== lastReady) {\n      mutable ready = newReady\n      lastReady = newReady\n    }\n    yield height\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 308,
      "value": "currentHeight = heightReadyTapStream()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 353,
      "value": "walletDefaultAddress = ready && client.walletDefaultAddress()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1091,
      "value": "## Backups",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 1095,
      "value": "import {backups, backupNowButton} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1124,
      "value": "backups()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1127,
      "value": "backupNowButton()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    }
  ],
  "resolutions": [
    {
      "type": "notebook",
      "specifier": "@jeremiak/download-data-button",
      "value": "bedb50933413e557@45"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/github-backups",
      "value": "1d309dbd9697e042@631"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/onversion",
      "value": "8aac8b2cb06bf434@263"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/footer",
      "value": "58f3eb7334551ae6@215"
    },
    {
      "type": "notebook",
      "specifier": "@mbostock/safe-local-storage",
      "value": "c2dae147641e012a@46"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/sentry",
      "value": "a81f2a20664080d3@245"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/catch-all",
      "value": "fa1f6059e44da1d5@425"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/repository-dispatch-min",
      "value": "b09f1f038b1040e3@76"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/webcode",
      "value": "6eda90668ae03044@836"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/webcode-ui",
      "value": "cbc2e7f6260d11b1@2790"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/endpoint-login-with-comment",
      "value": "027541187c96745d@147"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/login-with-comment",
      "value": "c16efae137e70585@1444"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/firebase",
      "value": "993a0c51ef1175ea@1396"
    },
    {
      "type": "notebook",
      "specifier": "@mbostock/synchronized-views",
      "value": "3df1b33bb2cfcd3c@475"
    },
    {
      "type": "notebook",
      "specifier": "@mbostock/disposal",
      "value": "4caee69e966109c8@35"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/get-comments",
      "value": "d84ccee0a2202d45@356"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/view",
      "value": "f92778131fd76559@1174"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/endpoint-services-footer",
      "value": "58f3eb7334551ae6@215"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/viewroutine",
      "value": "4a1fa3c167b752e5@304"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/serverless-cells",
      "value": "dff1e917c89f5e76@1964"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/secure-random-id@65",
      "value": "316f0885d15ab671@65"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/firebase-admin",
      "value": "698257e86fae4586@378"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/utils",
      "value": "b8a500058f806a6b@11"
    },
    {
      "type": "notebook",
      "specifier": "@nebrius/indented-toc",
      "value": "9bed702f80a3797e@402"
    },
    {
      "type": "notebook",
      "specifier": "@tomlarkworthy/randomid",
      "value": "316f0885d15ab671@69"
    },
    {
      "type": "notebook",
      "specifier": "@mootari/notebook-data",
      "value": "55bed46f68a80641@366"
    },
    {
      "type": "notebook",
      "specifier": "@endpointservices/metadata",
      "value": "e6f8b27a19576fcb@428"
    }
  ]
}

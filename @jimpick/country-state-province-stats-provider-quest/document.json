{
  "id": "f7e92424857a8419",
  "slug": "country-state-province-stats-provider-quest",
  "trashed": false,
  "description": "",
  "likes": 0,
  "publish_level": "live",
  "forks": 0,
  "fork_of": {
    "id": "8fb23227ff6f8a20",
    "slug": "provider-quest-regional-stats",
    "title": "Regional Stats [Provider.Quest]",
    "owner": {
      "id": "5252cea433451319",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "login": "jimpick",
      "name": "Jim Pick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "type": "team",
      "tier": "starter_2024",
      "following_count": 0,
      "followers_count": 0,
      "following": false
    },
    "version": 372
  },
  "has_importers": false,
  "update_time": "2022-04-23T00:24:39.619Z",
  "first_public_version": 416,
  "paused_version": null,
  "publish_time": "2022-01-08T01:42:26.860Z",
  "publish_version": 416,
  "latest_version": 416,
  "thumbnail": "66d14244c54f5bef5aea59d3cf777c162f0f07852bffb62549eadc05c39bbe62",
  "default_thumbnail": "66d14244c54f5bef5aea59d3cf777c162f0f07852bffb62549eadc05c39bbe62",
  "roles": [],
  "sharing": null,
  "owner": {
    "id": "5252cea433451319",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "type": "team",
    "tier": "starter_2024",
    "following_count": 0,
    "followers_count": 0,
    "following": false
  },
  "creator": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "tier": "public",
    "following_count": 0,
    "followers_count": 1,
    "following": false
  },
  "authors": [
    {
      "id": "bda4505ba9a55ac8",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "name": "Jim Pick",
      "login": "jimpick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "github_login": "jimpick",
      "tier": "public",
      "approved": true,
      "description": "",
      "following_count": 0,
      "followers_count": 1,
      "following": false
    }
  ],
  "collections": [
    {
      "id": "242749e359cb986b",
      "type": "public",
      "slug": "provider-quest",
      "title": "Provider.Quest",
      "description": "Analytics and visualizations for the Filecoin network",
      "update_time": "2021-09-27T20:45:27.747Z",
      "pinned": false,
      "ordered": true,
      "custom_thumbnail": null,
      "default_thumbnail": "86a76d62a04e84110aaed78d4885e5ecce416db4fe8e1069d06e3ed305da99eb",
      "thumbnail": "86a76d62a04e84110aaed78d4885e5ecce416db4fe8e1069d06e3ed305da99eb",
      "listing_count": 31,
      "parent_collection_count": 1,
      "owner": {
        "id": "5252cea433451319",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
        "login": "jimpick",
        "name": "Jim Pick",
        "bio": "Freelance Filecoin developer in Victoria, Canada",
        "home_url": "https://github.com/jimpick",
        "type": "team",
        "tier": "starter_2024",
        "following_count": 0,
        "followers_count": 0,
        "following": false
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "suggestion_from": null,
  "suggestions_to": [],
  "version": 416,
  "title": "Country/State/Province Stats [Provider.Quest]",
  "license": "apache-2.0",
  "copyright": "Copyright 2021 Jim Pick",
  "nodes": [
    {
      "id": 0,
      "value": "# Country/State/Province Stats [Provider.Quest]",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 20,
      "value": "md`${quickMenu}`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 39,
      "value": "md`Notes:\n\n* This is a variant of the [@jimpick/provider-quest-regional-stats](https://observablehq.com/@jimpick/provider-quest-regional-stats) notebook, but where each region is a country, with the exception of the USA and China, which are broken down into states and provinces.\n* Only includes storage providers that advertise IP addresses that have been geo-located to the selected region.\n* Most power on the network is associated with storage providers that do not advertise IP addresses (or our geo-IP lookup failed), so they are allocated to \"No Region\". These providers can publish offline deals, but aren't reachable for online deals or online retrievals.\n* Storage providers may be included in multiple regions if they have multiple IP addresses (power is split between regions).\n* IP addresses are not tested to confirm that they are live.\n* The regions are defined using JavaScript in the [@jimpick/internal-mapping-storage-provider-to-countrystateprovin](https://observablehq.com/@jimpick/internal-mapping-storage-provider-to-countrystateprovin?collection=@jimpick/provider-quest) notebook.\n`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 32,
      "value": "viewof selectedRegion = Inputs.select(regionsWithData, { label: \"Select a region\", format: r => r.pretty, value: regions.find(({ region }) => region === defaultRegion ) })",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 392,
      "value": "viewof useSyntheticRegions = Inputs.toggle({ label: 'Use Synthetic Regions', value: defaultUseSyntheticRegions })",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 89,
      "value": "md`${permalink}`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 66,
      "value": "md`## Region: ${selectedRegion.pretty} - Quality Adjusted Power`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 122,
      "value": "md`${selectedRegion.note ? selectedRegion.note : ''} ${ selectedRegion.region.match(/^.*-XX/) && selectedRegion.region !== 'none' ? \"Includes \" + regionsCountriesEnglish[selectedRegion.region] + '.' : ''}`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 69,
      "value": "Plot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.areaY(filteredRows, {x: \"date\", y: \"qualityAdjPower\" + selectedRegion.scale, fill: \"#bab0ab\"}),\n    Plot.ruleY([0])\n  ]\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 28,
      "value": "md`## Region: ${selectedRegion.pretty} - Number of Providers (Split)\n\n\"Split\" = Counts for providers with locations in multiple regions are counted fractionally.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 42,
      "value": "Plot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.areaY(filteredRows, {x: \"date\", y: \"minerCount\", fill: \"#bab0ab\"}),\n    Plot.ruleY([0])\n  ]\n})",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 224,
      "value": "md`## Region: ${selectedRegion.pretty} - Published Deals Per Day`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 227,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      count: record ? record.count : NaN\n    })\n  }\n  console.log('dataWithHoles', dataWithHoles)\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"count\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 256,
      "value": "md`## Region: ${selectedRegion.pretty} - Total Data Size of Published Deals Per Day (TiB)`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 259,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      sizeTiB: record ? record['sum(pieceSizeDouble)'] / 1024 ** 4 : NaN\n    })\n  }\n  console.log('dataWithHoles', dataWithHoles)\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"sizeTiB\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 264,
      "value": "md`## Region: ${selectedRegion.pretty} - Lifetime Value of Published Deals Per Day (FIL)`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 268,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      lifetimeValue: record ? record['sum(lifetimeValue)'] : NaN\n    })\n  }\n  console.log('dataWithHoles', dataWithHoles)\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"lifetimeValue\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 271,
      "value": "md`## Region: ${selectedRegion.pretty} - Number of Providers that Accepted Deals`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 275,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      providerCount: record ? record['count(provider)'] : NaN\n    })\n  }\n  console.log('dataWithHoles', dataWithHoles)\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"providerCount\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 278,
      "value": "md`## Region: ${selectedRegion.pretty} - Number of Clients that Placed Deals with Providers in Region`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 282,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      approxClientCount: record ? record['approx_count_distinct(client)'] : NaN\n    })\n  }\n  console.log('dataWithHoles', dataWithHoles)\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"approxClientCount\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 286,
      "value": "md`## Region: ${selectedRegion.pretty} - Number of Client <-> Miner Pairs`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 290,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      approxPairsCount: record ? record['approx_count_distinct(clientProvider)'] : NaN\n    })\n  }\n  console.log('dataWithHoles', dataWithHoles)\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"approxPairsCount\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 292,
      "value": "md`## Region: ${selectedRegion.pretty} - Distinct CIDs (Content Identifiers)`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 295,
      "value": "{\n  const data = dailyDealsByRegion.filter(({ region }) => region === selectedRegion.region)\n  if (data.length === 0) {\n    return md`No deals for region.`\n  }\n  const dataWithHoles = []\n  for (let date = data[0].date; date <= data[data.length - 1].date; date = agnosticAddDays(date, 1)) {\n    const record = data.find(({ date: dataDate }) => dateFns.isEqual(dataDate, date))\n    dataWithHoles.push({\n      date,\n      approxLabelCount: record ? record['approx_count_distinct(label)'] : NaN\n    })\n  }\n  return Plot.plot({\n    y: {\n      grid: true\n    },\n    marks: [\n      Plot.areaY(dataWithHoles, {x: \"date\", y: \"approxLabelCount\", fill: \"#bab0ab\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  })\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 12,
      "value": "md`## Data`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 9,
      "value": "import {minerPowerDailyAverageLatestBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 399,
      "value": "minerPowerDailyAverageLatestBucketUrl",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 23,
      "value": "minerPowerByRegionReport = {\n  const file = useSyntheticRegions ? 'provider-power-by-synthetic-csp-region' : 'miner-power-by-country-state-province'\n  return (await fetch(`${minerPowerDailyAverageLatestBucketUrl}/${file}.json`)).json()\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 26,
      "value": "Inputs.table(minerPowerByRegionReport.rows)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 331,
      "value": "minerPowerByRegionIndex = d3.index(minerPowerByRegionReport.rows, d => d.region, d => d.date)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 377,
      "value": "regions = [...minerPowerByRegionIndex.keys()].sort().map(key => ({\n  region: key,\n  pretty: `${key}: ${regionsCountriesEnglish[key]}`,\n  scale: 'PiB'\n}))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 336,
      "value": "regionsWithData = regions.filter(({ region }) => minerPowerByRegionIndex.get(region))",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 44,
      "value": "filteredRows = minerPowerByRegionReport.rows\n  .filter(({ region }) => region === selectedRegion.region)\n  .map(row => ({\n    date: d3.isoParse(row.date),\n    minerCount: row['sum(splitCount)'],\n    rawBytePower: row['sum(rawBytePower)'],\n    rawBytePowerKiB: row['sum(rawBytePower)'] / 1024,\n    rawBytePowerMiB: row['sum(rawBytePower)'] / 1024 ** 2,\n    rawBytePowerGiB: row['sum(rawBytePower)'] / 1024 ** 3,\n    rawBytePowerTiB: row['sum(rawBytePower)'] / 1024 ** 4,\n    rawBytePowerPiB: row['sum(rawBytePower)'] / 1024 ** 5,\n    rawBytePowerEiB: row['sum(rawBytePower)'] / 1024 ** 6,\n    qualityAdjPower: row['sum(qualityAdjPower)'],\n    qualityAdjPowerKiB: row['sum(qualityAdjPower)'] / 1024,\n    qualityAdjPowerMiB: row['sum(qualityAdjPower)'] / 1024 ** 2,\n    qualityAdjPowerGiB: row['sum(qualityAdjPower)'] / 1024 ** 3,\n    qualityAdjPowerTiB: row['sum(qualityAdjPower)'] / 1024 ** 4,\n    qualityAdjPowerPiB: row['sum(qualityAdjPower)'] / 1024 ** 5,\n    qualityAdjPowerEiB: row['sum(qualityAdjPower)'] / 1024 ** 6,\n  }))",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 145,
      "value": "import {geoIpLookupsBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 148,
      "value": "minerLocationsReport = (await fetch(`${geoIpLookupsBucketUrl}/provider-country-state-province-locations-latest.json`)).json()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 140,
      "value": "isoCountries = (await fetch('https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-2/slim-2.json')).json()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 151,
      "value": "regionsCountries = {\n  const regionsCountries = {}\n  for (const location of minerLocationsReport.minerLocations) {\n    regionsCountries[location.region] ||= new Set()\n    regionsCountries[location.region].add(location.country)\n  }\n  return regionsCountries\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 154,
      "value": "regionsCountriesEnglish = Object.fromEntries(\n  Object.entries(regionsCountries).map(([key, set]) => [\n    key,\n    [...set].map(code => {\n      const countryRecord = isoCountries.find(record => record['alpha-2'] === code)\n      return countryRecord ? countryRecord.name : null\n    }).sort().join(', ')\n  ])\n)",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 218,
      "value": "import {dealsBucketUrl} from '@jimpick/provider-quest-feeds'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 221,
      "value": "dailyDealsByRegion = {\n  const file = useSyntheticRegions ? 'daily-deals-by-synthetic-csp-region' : 'daily-deals-by-country-state-province'\n  const deals = await (await fetch(`${dealsBucketUrl}/${file}.json`)).json()\n  return deals.map(({ date, ...rest }) => ({ date: d3.isoParse(date), ...rest }))\n}",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 91,
      "value": "md`## Permalink support`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 97,
      "value": "params = [...(new URLSearchParams(location.search.substring(1))).entries()].reduce((acc, [key, value]) => ({ [key]: value, ...acc }), {})",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 104,
      "value": "defaultRegion = params.region || regions[0].region",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 394,
      "value": "defaultUseSyntheticRegions = params.synthetic != undefined ? (params.synthetic == 'true') : true",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 99,
      "value": "permalink = `[Permalink](${document.baseURI.replace(/\\?.*/,'')}?region=${selectedRegion.region}&synthetic=${useSyntheticRegions})`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 6,
      "value": "md`## Imports`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 18,
      "value": "import {quickMenu} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 48,
      "value": "d3 = require(\"d3@6\")",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 247,
      "value": "dateFns = require('https://bundle.run/date-fns@2.22.1')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 361,
      "value": "import {agnosticAddDays} from \"@jimpick/provider-quest-utils\"",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 404,
      "value": "## Backups",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 408,
      "value": "import {backups, backupNowButton} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 411,
      "value": "backups()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    }
  ],
  "resolutions": [],
  "schedule": null,
  "last_view_time": null
}

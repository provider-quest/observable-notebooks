{
  "id": "e9d56af58af6ac11",
  "slug": "provider-quest-publish-deal-messages-stream",
  "trashed": false,
  "description": "",
  "likes": 0,
  "publish_level": "live",
  "forks": 0,
  "fork_of": {
    "id": "21086a20bf33e73c",
    "slug": "lotus-js-client-mainnet-messages",
    "title": "Lotus JS Client - Mainnet - Messages",
    "owner": {
      "id": "bda4505ba9a55ac8",
      "github_login": "jimpick",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "login": "jimpick",
      "name": "Jim Pick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "type": "individual",
      "tier": "public",
      "following_count": 0,
      "followers_count": 0,
      "following": false
    },
    "version": 1176
  },
  "has_importers": false,
  "update_time": "2022-12-23T01:42:13.685Z",
  "first_public_version": 1443,
  "paused_version": null,
  "publish_time": "2021-06-24T21:20:32.547Z",
  "publish_version": 1464,
  "latest_version": 1464,
  "thumbnail": "6d3be48ac9d367ba8e2ad501c5b6855039efdbcedeb3b66e3cb3f55f21adf293",
  "default_thumbnail": "6d3be48ac9d367ba8e2ad501c5b6855039efdbcedeb3b66e3cb3f55f21adf293",
  "roles": [],
  "sharing": null,
  "owner": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "type": "individual",
    "tier": "public",
    "following_count": 0,
    "followers_count": 0,
    "following": false
  },
  "creator": {
    "id": "bda4505ba9a55ac8",
    "github_login": "jimpick",
    "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
    "login": "jimpick",
    "name": "Jim Pick",
    "bio": "Freelance Filecoin developer in Victoria, Canada",
    "home_url": "https://github.com/jimpick",
    "tier": "public",
    "following_count": 0,
    "followers_count": 0,
    "following": false
  },
  "authors": [
    {
      "id": "bda4505ba9a55ac8",
      "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
      "name": "Jim Pick",
      "login": "jimpick",
      "bio": "Freelance Filecoin developer in Victoria, Canada",
      "home_url": "https://github.com/jimpick",
      "github_login": "jimpick",
      "tier": "public",
      "approved": true,
      "description": "",
      "following_count": 0,
      "followers_count": 0,
      "following": false
    }
  ],
  "collections": [
    {
      "id": "242749e359cb986b",
      "type": "public",
      "slug": "provider-quest",
      "title": "Provider.Quest",
      "description": "Analytics and visualizations for the Filecoin network",
      "update_time": "2021-09-27T20:45:27.747Z",
      "pinned": false,
      "ordered": true,
      "custom_thumbnail": null,
      "default_thumbnail": "cee41dcc09fccedac17b81adb7ef96405f2120e165db0b8c9e658a7d7d2f63a7",
      "thumbnail": "cee41dcc09fccedac17b81adb7ef96405f2120e165db0b8c9e658a7d7d2f63a7",
      "listing_count": 31,
      "parent_collection_count": 1,
      "owner": {
        "id": "bda4505ba9a55ac8",
        "github_login": "jimpick",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/e8813527082139d5411445010e72fd85f99b04a26355e795d0ea26765425d0cd",
        "login": "jimpick",
        "name": "Jim Pick",
        "bio": "Freelance Filecoin developer in Victoria, Canada",
        "home_url": "https://github.com/jimpick",
        "type": "individual",
        "tier": "public",
        "following_count": 0,
        "followers_count": 0,
        "following": false
      }
    }
  ],
  "files": [],
  "comments": [],
  "commenting_lock": null,
  "suggestion_from": null,
  "suggestions_to": [],
  "version": 1464,
  "title": "Internal: Scanner: Deals [Provider.Quest]",
  "license": "apache-2.0",
  "copyright": "Copyright 2021 Jim Pick",
  "nodes": [
    {
      "id": 0,
      "value": "md`# Internal: Scanner: Deals [Provider.Quest]`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 163,
      "value": "md`This demo connects to a node running Lotus Filecoin implementation on the mainnet.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 167,
      "value": "md`If the connection is working, the following should retrieve the version and the block delay via a WebSocket using the [Lotus JS Client](https://github.com/filecoin-shipyard/js-lotus-client) libraries.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 114,
      "value": "await client.version()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 902,
      "value": "chainHead = await client.chainHead()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 904,
      "value": "currentHeight = chainHead.Height",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1200,
      "value": "headTipSet = chainHead.Cids",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 906,
      "value": "viewof selectedHeight = html`<input type=range min=${currentHeight - 11000} max=${currentHeight - 1} value=${currentHeight - 50}>`",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 908,
      "value": "selectedHeight",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1241,
      "value": "md`${currentHeight - selectedHeight} epochs (${dateFns.formatDistance(epochToDate(currentHeight),  epochToDate(selectedHeight), { includeSeconds: true })})`",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1236,
      "value": "viewof start = Inputs.button(\"Start\")",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1311,
      "value": "maxElapsed = 2.5 * 60 * 1000 // 2.5 minutes",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1183,
      "value": "async function * heightRangeStream() {\n  if (start > 0) {\n    for (let height = selectedHeight; height < currentHeight; height++) {\n      yield height\n    }\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1185,
      "value": "async function * tipSetStream() {\n  for await (const height of heightRangeStream()) {\n    const tipSet = await client.chainGetTipSetByHeight(height, headTipSet)\n    yield {\n      height,\n      tipSet\n    }\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1191,
      "value": "tipSets = {\n  const result = []\n  /* for await (const tipSet of tipSetStream()) {\n    result.push(tipSet)\n  } */\n  return result\n  \n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1173,
      "value": "// tipSet = [...tipSetKey].map(obj => obj['/']).sort().join(',')\n",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1135,
      "value": "async function* messagesStream() {\n  let hits = 0\n  let messagesProcessed = 0\n  const startTime = new Date()\n  for await (const tipSetRecord of tipSetStream()) {\n    const seenMessages = new Set()\n    const selectedTipSet = tipSetRecord.tipSet\n    let cso\n    let csoStartTime\n    if (selectedTipSet.Cids) {\n      const height = selectedTipSet.Height\n      console.log(`${height}, ${currentHeight - height} remaining`)\n      for (let i = 0; i < selectedTipSet.Cids.length; i++) {\n        const blockCid = selectedTipSet.Cids[i]\n        const blockMiner = selectedTipSet.Blocks[i].Miner\n        const now = new Date()\n        if (now - startTime > maxElapsed) {\n          yield {\n            done: true,\n            timeout: true\n          }\n          return\n        }\n        yield {\n          height,\n          blockMiner,\n          i,\n          length: selectedTipSet.Cids.length,\n          startHeight: selectedHeight,\n          endHeight: currentHeight,\n          messagesProcessed,\n          hits\n        }\n        try {\n          const messages = await client.chainGetBlockMessages(blockCid)\n          for (const message of messages.BlsMessages) {\n            yield *yieldMessage(message, 'bls')\n          }\n        } catch (e) {\n          console.error('messages error', height, e)\n        }\n        /* Non-miners shouldn't publish deals\n        for (const { Message: message } of messages.SecpkMessages) {\n          yield *yieldMessage(message, 'secpk')\n        }\n        */\n  \n        async function *yieldMessage (message, signatureType) {\n          messagesProcessed++\n          if (message.To === 'f05' && message.Method === 4) {\n            console.log('JimX message', message)\n            const blockCidStr = blockCid['/']\n            const messageCidStr = message.CID['/']\n            if (seenMessages.has(messageCidStr)) return\n            hits++\n            seenMessages.add(messageCidStr)\n\n            for (let retries = 0; i < 3; i++) {\n              if (!cso) {\n                // Compute state to get results\n                console.log('StateCompute', height, `attempt #${retries + 1}`)\n                csoStartTime = new Date()\n                cso = client.stateCompute(height, null, selectedTipSet.Cids)\n              }\n              const timeout = new Promise((resolve, reject) => setTimeout(() => resolve({ timeout: 1 }), 30000))\n              const results = await Promise.race([timeout, cso])\n              const elapsed = ((new Date()) - csoStartTime) / 1000\n              console.log('Jim results', results)\n              if (results?.timeout) {\n                console.log('Jim timeout', elapsed )\n                cso = null \n                continue\n              }\n              const trace = results.Trace.filter(({ MsgCid }) => MsgCid['/'] === messageCidStr)\n              console.log('StateCompute done', height, (await cso).Trace.length, elapsed)\n  \n              if (trace.length > 0 && trace[0].MsgRct.Return) {\n                yield {\n                  height,\n                  messageCid: messageCidStr,\n                  // signatureType,\n                  blockCid: blockCidStr,\n                  version: message.Version,\n                  to: message.To,\n                  from: message.From,\n                  nonce: message.Nonce,\n                  value: message.Value,\n                  gasLimit: message.GasLimit,\n                  gasFeeCap: message.GasFeeCap,\n                  gasPremium: message.GasPremium,\n                  method: message.Method,\n                  params: message.Params,\n                  decodedDeals: decodeDeals(message.Params),\n                  results: cbor.decode(trace[0].MsgRct.Return, 'base64')[0]\n                }\n                break\n              } else {\n                console.error('Missing or broken trace', height, messageCidStr)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  yield { done: true }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1161,
      "value": "// messagesStream()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1163,
      "value": "messages = {\n  const result = []\n  /* for await (const message of messagesStream()) {\n    if (message.messageCid) {\n      result.push(message)\n      yield result\n    }\n  } */\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1262,
      "value": "async function* dealStream() {\n  for await (const message of messagesStream()) {\n    if (message.startHeight) {\n      yield {\n        height: message.height,\n        startHeight: message.startHeight,\n        endHeight: message.endHeight,\n        messagesProcessed: message.messagesProcessed,\n        messageHits: message.hits\n      }\n    }\n    if (message.decodedDeals) {\n      const messageTime = epochToDate(message.height).toISOString()\n      for (let i = 0; i < message.decodedDeals.length; i++) {\n        yield {\n          dealId: message.results[i],\n          messageHeight: message.height,\n          messageTime,\n          messageCid: message.messageCid,\n          ...message.decodedDeals[i],\n          startTime: epochToDate(message.decodedDeals[i].startEpoch).toISOString(),\n          endTime: epochToDate(message.decodedDeals[i].endEpoch).toISOString()\n        }\n      }\n    }\n  }\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1266,
      "value": "// dealStream()",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1342,
      "value": "deals.state === 'done' ? `Done. ${deals.endHeight - deals.lastHeight} epochs remaining.` : `${dateFns.formatDistance(deals.elapsed * 1000, 0)} - ${deals.height}, ${deals.endHeight - deals.height} remaining`",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1270,
      "value": "deals = {\n  if (start === 0) {\n    yield {\n      state: 'paused'\n    }\n    return\n  }\n  yield {\n    state: 'starting'\n  } \n  const deals = []\n  const startTime = new Date()\n  let height\n  let startHeight\n  let endHeight\n  let messagesProcessed\n  let messageHits\n  for await (const deal of dealStream()) {\n    if (deal.height) {\n      height = deal.height\n      startHeight = deal.startHeight\n      endHeight = deal.endHeight\n      messagesProcessed = deal.messagesProcessed\n      messageHits = deal.messageHits\n    }\n    if (deal.dealId) {\n      deals.push(deal)\n    }\n    yield {\n      state: 'streaming',\n      elapsed: ((new Date()) - startTime) / 1000,\n      dealsLength: deals.length,\n      height,\n      startHeight,\n      endHeight,\n      messagesProcessed,\n      messageHits\n    }    \n  }\n  const endTime = new Date()\n  yield {\n    state: 'done',\n    elapsed: (endTime - startTime) / 1000,\n    deals,\n    startTime: startTime.toISOString(),\n    endTime: endTime.toISOString(),\n    lastHeight: height,\n    startHeight,\n    endHeight,\n    messagesProcessed,\n    messageHits\n  }\n  console.log('Done.', dateFns.formatDistance(endTime, startTime))\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 152,
      "value": "md`# Setting up Lotus JS Client\n\nThe following three stanzas import the library from npm.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 49,
      "value": "LotusRPC = (await import('@filecoin-shipyard/lotus-client-rpc')).LotusRPC",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 56,
      "value": "BrowserProvider = (await import('@filecoin-shipyard/lotus-client-provider-browser')).BrowserProvider",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 58,
      "value": "schema = (await import('@filecoin-shipyard/lotus-client-schema')).mainnet.fullNode",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 149,
      "value": "md`Here is the list of methods from the schema file. Currently just a subset of the available methods in the Lotus JSON-RPC API, but any method can be added.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 60,
      "value": "Object.keys(schema.methods)",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 161,
      "value": "md`To make a client object to make calls with, you supply an endpoint url to make a websocket connection to the Lotus node to the RPC library, and supply a provider object (contains the websocket code) and a schema.`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1068,
      "value": "endpointUrl = {\n  return \"https://lotus.miner.report/mainnet_api/0/node/rpc/v0\"\n  // return \"https://lotus.jimpick.com/mainnet_api/0/node/rpc/v0\"\n  // return \"https://api.node.glif.io/rpc/v0\"\n  // return \"wss://api.chain.love/rpc/v0\"\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 63,
      "value": "client = {\n  const provider = new BrowserProvider(endpointUrl)\n  return new LotusRPC(provider, { schema })\n}",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1276,
      "value": "md`# More imports`",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1252,
      "value": "import { decodeDeals } from '@jimpick/filecoin-decode-deal-params'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1258,
      "value": "cbor = import('https://cdn.skypack.dev/borc')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1274,
      "value": "import { epochToDate } from '@jbenet/filecoin-chain-time-calculator'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1282,
      "value": "dateFns = require('https://bundle.run/date-fns@2.22.1')",
      "pinned": true,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1427,
      "value": "## Backups",
      "pinned": false,
      "mode": "md",
      "data": null,
      "name": ""
    },
    {
      "id": 1431,
      "value": "import {backups, backupNowButton} from '@jimpick/provider-quest-utils'",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    },
    {
      "id": 1434,
      "value": "backups()",
      "pinned": false,
      "mode": "js",
      "data": null,
      "name": null
    }
  ],
  "resolutions": []
}
